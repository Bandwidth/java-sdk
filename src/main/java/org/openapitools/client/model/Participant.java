/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.DeviceApiVersionEnum;
import org.openapitools.client.model.PublishPermissionsEnum;
import org.openapitools.client.model.Subscriptions;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Participant object.
 */
@ApiModel(description = "Participant object.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-27T11:08:51.953012-04:00[America/New_York]")
public class Participant {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_PUBLISH_PERMISSIONS = "publishPermissions";
  @SerializedName(SERIALIZED_NAME_PUBLISH_PERMISSIONS)
  private Set<PublishPermissionsEnum> publishPermissions = null;

  public static final String SERIALIZED_NAME_SESSIONS = "sessions";
  @SerializedName(SERIALIZED_NAME_SESSIONS)
  private List<String> sessions = null;

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private Subscriptions subscriptions;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_DEVICE_API_VERSION = "deviceApiVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_API_VERSION)
  private DeviceApiVersionEnum deviceApiVersion = DeviceApiVersionEnum.V3;

  public Participant() {
  }

  
  public Participant(
     String id, 
     List<String> sessions
  ) {
    this();
    this.id = id;
    this.sessions = sessions;
  }

   /**
   * Unique id of the participant.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "320e2af6-13ec-498d-8b51-daba52c37853", value = "Unique id of the participant.")

  public String getId() {
    return id;
  }




  public Participant callbackUrl(String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * Full callback url to use for notifications about this participant.
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/callback", value = "Full callback url to use for notifications about this participant.")

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public Participant publishPermissions(Set<PublishPermissionsEnum> publishPermissions) {
    
    this.publishPermissions = publishPermissions;
    return this;
  }

  public Participant addPublishPermissionsItem(PublishPermissionsEnum publishPermissionsItem) {
    if (this.publishPermissions == null) {
      this.publishPermissions = new LinkedHashSet<>();
    }
    this.publishPermissions.add(publishPermissionsItem);
    return this;
  }

   /**
   * Defines if this participant can publish audio or video.
   * @return publishPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"VIDEO\",\"AUDIO\"]", value = "Defines if this participant can publish audio or video.")

  public Set<PublishPermissionsEnum> getPublishPermissions() {
    return publishPermissions;
  }


  public void setPublishPermissions(Set<PublishPermissionsEnum> publishPermissions) {
    this.publishPermissions = publishPermissions;
  }


   /**
   * List of session ids this participant is associated with  Capped to one  Upon creation of a Participant, returns as an empty array.
   * @return sessions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"75c21163-e110-41bc-bd76-1bb428ec85d5\"]", value = "List of session ids this participant is associated with  Capped to one  Upon creation of a Participant, returns as an empty array.")

  public List<String> getSessions() {
    return sessions;
  }




  public Participant subscriptions(Subscriptions subscriptions) {
    
    this.subscriptions = subscriptions;
    return this;
  }

   /**
   * Get subscriptions
   * @return subscriptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Subscriptions getSubscriptions() {
    return subscriptions;
  }


  public void setSubscriptions(Subscriptions subscriptions) {
    this.subscriptions = subscriptions;
  }


  public Participant tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * User defined tag to associate with the participant.
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "participant1", value = "User defined tag to associate with the participant.")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public Participant deviceApiVersion(DeviceApiVersionEnum deviceApiVersion) {
    
    this.deviceApiVersion = deviceApiVersion;
    return this;
  }

   /**
   * Get deviceApiVersion
   * @return deviceApiVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceApiVersionEnum getDeviceApiVersion() {
    return deviceApiVersion;
  }


  public void setDeviceApiVersion(DeviceApiVersionEnum deviceApiVersion) {
    this.deviceApiVersion = deviceApiVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Participant participant = (Participant) o;
    return Objects.equals(this.id, participant.id) &&
        Objects.equals(this.callbackUrl, participant.callbackUrl) &&
        Objects.equals(this.publishPermissions, participant.publishPermissions) &&
        Objects.equals(this.sessions, participant.sessions) &&
        Objects.equals(this.subscriptions, participant.subscriptions) &&
        Objects.equals(this.tag, participant.tag) &&
        Objects.equals(this.deviceApiVersion, participant.deviceApiVersion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, callbackUrl, publishPermissions, sessions, subscriptions, tag, deviceApiVersion);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Participant {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    publishPermissions: ").append(toIndentedString(publishPermissions)).append("\n");
    sb.append("    sessions: ").append(toIndentedString(sessions)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    deviceApiVersion: ").append(toIndentedString(deviceApiVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("callbackUrl");
    openapiFields.add("publishPermissions");
    openapiFields.add("sessions");
    openapiFields.add("subscriptions");
    openapiFields.add("tag");
    openapiFields.add("deviceApiVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Participant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Participant.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Participant is not found in the empty JSON string", Participant.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Participant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Participant` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("callbackUrl") != null && !jsonObj.get("callbackUrl").isJsonNull()) && !jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("publishPermissions") != null && !jsonObj.get("publishPermissions").isJsonNull()) && !jsonObj.get("publishPermissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("publishPermissions").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("sessions") != null && !jsonObj.get("sessions").isJsonNull()) && !jsonObj.get("sessions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessions` to be an array in the JSON string but got `%s`", jsonObj.get("sessions").toString()));
      }
      // validate the optional field `subscriptions`
      if (jsonObj.get("subscriptions") != null && !jsonObj.get("subscriptions").isJsonNull()) {
        Subscriptions.validateJsonObject(jsonObj.getAsJsonObject("subscriptions"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Participant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Participant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Participant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Participant.class));

       return (TypeAdapter<T>) new TypeAdapter<Participant>() {
           @Override
           public void write(JsonWriter out, Participant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Participant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Participant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Participant
  * @throws IOException if the JSON string is invalid with respect to Participant
  */
  public static Participant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Participant.class);
  }

 /**
  * Convert an instance of Participant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

