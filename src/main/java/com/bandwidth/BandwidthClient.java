/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth;

import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;


import com.bandwidth.http.client.HttpClient;
import com.bandwidth.http.client.HttpClientConfiguration;
import com.bandwidth.http.client.OkClient;
import com.bandwidth.http.client.ReadonlyHttpClientConfiguration;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class BandwidthClient implements Configuration {
    private MessagingClient messagingClient;
    private TwoFactorAuthClient twoFactorAuthClient;
    private VoiceClient voiceClient;
    private WebRtcClient webRtcClient;

    /**
     * Provides access to messagingClient Client
     * @return Returns the MessagingClient instance
     */
    public MessagingClient getMessagingClient() {
        return messagingClient;
    }

    /**
     * Provides access to twoFactorAuthClient Client
     * @return Returns the TwoFactorAuthClient instance
     */
    public TwoFactorAuthClient getTwoFactorAuthClient() {
        return twoFactorAuthClient;
    }

    /**
     * Provides access to voiceClient Client
     * @return Returns the VoiceClient instance
     */
    public VoiceClient getVoiceClient() {
        return voiceClient;
    }

    /**
     * Provides access to webRtcClient Client
     * @return Returns the WebRtcClient instance
     */
    public WebRtcClient getWebRtcClient() {
        return webRtcClient;
    }


    /**
     * Shutdown the underlying HttpClient instance
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    private BandwidthClient(Environment environment, String messagingBasicAuthUserName,
            String messagingBasicAuthPassword, String twoFactorAuthBasicAuthUserName,
            String twoFactorAuthBasicAuthPassword, String voiceBasicAuthUserName, String voiceBasicAuthPassword,
            String webRtcBasicAuthUserName, String webRtcBasicAuthPassword, HttpClient httpClient, long timeout,
            ReadonlyHttpClientConfiguration httpClientConfig, Map<String, AuthManager> authManagers) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.timeout = timeout;
        this.httpClientConfig = httpClientConfig;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);
        if (this.authManagers.containsKey("messaging")) {
            this.messagingBasicAuthManager = (MessagingBasicAuthManager)this.authManagers.get("messaging");
        }
        if (!this.authManagers.containsKey("messaging")
                || getMessagingBasicAuthCredentials().getMessagingBasicAuthUserName() != messagingBasicAuthUserName
                || getMessagingBasicAuthCredentials().getMessagingBasicAuthPassword() != messagingBasicAuthPassword) {
            this.messagingBasicAuthManager = new MessagingBasicAuthManager(messagingBasicAuthUserName, messagingBasicAuthPassword);
            this.authManagers.put("messaging", messagingBasicAuthManager);
        }
        if (this.authManagers.containsKey("twoFactorAuth")) {
            this.twoFactorAuthBasicAuthManager = (TwoFactorAuthBasicAuthManager)this.authManagers.get("twoFactorAuth");
        }
        if (!this.authManagers.containsKey("twoFactorAuth")
                || getTwoFactorAuthBasicAuthCredentials().getTwoFactorAuthBasicAuthUserName() != twoFactorAuthBasicAuthUserName
                || getTwoFactorAuthBasicAuthCredentials().getTwoFactorAuthBasicAuthPassword() != twoFactorAuthBasicAuthPassword) {
            this.twoFactorAuthBasicAuthManager = new TwoFactorAuthBasicAuthManager(twoFactorAuthBasicAuthUserName, twoFactorAuthBasicAuthPassword);
            this.authManagers.put("twoFactorAuth", twoFactorAuthBasicAuthManager);
        }
        if (this.authManagers.containsKey("voice")) {
            this.voiceBasicAuthManager = (VoiceBasicAuthManager)this.authManagers.get("voice");
        }
        if (!this.authManagers.containsKey("voice")
                || getVoiceBasicAuthCredentials().getVoiceBasicAuthUserName() != voiceBasicAuthUserName
                || getVoiceBasicAuthCredentials().getVoiceBasicAuthPassword() != voiceBasicAuthPassword) {
            this.voiceBasicAuthManager = new VoiceBasicAuthManager(voiceBasicAuthUserName, voiceBasicAuthPassword);
            this.authManagers.put("voice", voiceBasicAuthManager);
        }
        if (this.authManagers.containsKey("webRtc")) {
            this.webRtcBasicAuthManager = (WebRtcBasicAuthManager)this.authManagers.get("webRtc");
        }
        if (!this.authManagers.containsKey("webRtc")
                || getWebRtcBasicAuthCredentials().getWebRtcBasicAuthUserName() != webRtcBasicAuthUserName
                || getWebRtcBasicAuthCredentials().getWebRtcBasicAuthPassword() != webRtcBasicAuthPassword) {
            this.webRtcBasicAuthManager = new WebRtcBasicAuthManager(webRtcBasicAuthUserName, webRtcBasicAuthPassword);
            this.authManagers.put("webRtc", webRtcBasicAuthManager);
        }



        messagingClient = new MessagingClient(this);
        twoFactorAuthClient = new TwoFactorAuthClient(this);
        voiceClient = new VoiceClient(this);
        webRtcClient = new WebRtcClient(this);
    }

    /**
     * Current API environment
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * The timeout to use for making HTTP requests.
     */
    private final long timeout;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    /**
     * MessagingBasicAuthManager
     */
    private MessagingBasicAuthManager messagingBasicAuthManager;

    /**
     * TwoFactorAuthBasicAuthManager
     */
    private TwoFactorAuthBasicAuthManager twoFactorAuthBasicAuthManager;

    /**
     * VoiceBasicAuthManager
     */
    private VoiceBasicAuthManager voiceBasicAuthManager;

    /**
     * WebRtcBasicAuthManager
     */
    private WebRtcBasicAuthManager webRtcBasicAuthManager;

    /**
     * Current API environment
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    public HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @return timeout
     */
    public long getTimeout() {
        return timeout;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    private String getMessagingBasicAuthUserName() {
        return getMessagingBasicAuthCredentials().getMessagingBasicAuthUserName();
    }

    private String getMessagingBasicAuthPassword() {
        return getMessagingBasicAuthCredentials().getMessagingBasicAuthPassword();
    }

    /**
     * The credentials to use with basic authentication
     * @return messagingBasicAuthCredentials
     */
    public MessagingBasicAuthCredentials getMessagingBasicAuthCredentials() {
        return messagingBasicAuthManager;
    }

    private String getTwoFactorAuthBasicAuthUserName() {
        return getTwoFactorAuthBasicAuthCredentials().getTwoFactorAuthBasicAuthUserName();
    }

    private String getTwoFactorAuthBasicAuthPassword() {
        return getTwoFactorAuthBasicAuthCredentials().getTwoFactorAuthBasicAuthPassword();
    }

    /**
     * The credentials to use with basic authentication
     * @return twoFactorAuthBasicAuthCredentials
     */
    public TwoFactorAuthBasicAuthCredentials getTwoFactorAuthBasicAuthCredentials() {
        return twoFactorAuthBasicAuthManager;
    }

    private String getVoiceBasicAuthUserName() {
        return getVoiceBasicAuthCredentials().getVoiceBasicAuthUserName();
    }

    private String getVoiceBasicAuthPassword() {
        return getVoiceBasicAuthCredentials().getVoiceBasicAuthPassword();
    }

    /**
     * The credentials to use with basic authentication
     * @return voiceBasicAuthCredentials
     */
    public VoiceBasicAuthCredentials getVoiceBasicAuthCredentials() {
        return voiceBasicAuthManager;
    }

    private String getWebRtcBasicAuthUserName() {
        return getWebRtcBasicAuthCredentials().getWebRtcBasicAuthUserName();
    }

    private String getWebRtcBasicAuthPassword() {
        return getWebRtcBasicAuthCredentials().getWebRtcBasicAuthPassword();
    }

    /**
     * The credentials to use with basic authentication
     * @return webRtcBasicAuthCredentials
     */
    public WebRtcBasicAuthCredentials getWebRtcBasicAuthCredentials() {
        return webRtcBasicAuthManager;
    }

    /**
     * The list of auth managers
     * @return authManagers
     */
    public Map<String, AuthManager> getAuthManagers() {
        return authManagers;
    }

    /**
     * Get base URI by current environment
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "api.bandwidth.com";
            }
            if (server.equals(Server.MESSAGINGDEFAULT)) {
                return "https://messaging.bandwidth.com/api/v2";
            }
            if (server.equals(Server.TWOFACTORAUTHDEFAULT)) {
                return "https://mfa.bandwidth.com/api/v1/";
            }
            if (server.equals(Server.VOICEDEFAULT)) {
                return "https://voice.bandwidth.com";
            }
            if (server.equals(Server.WEBRTCDEFAULT)) {
                return "https://api.webrtc.bandwidth.com/v1";
            }
        }
        return "api.bandwidth.com";
    }

    
    /**
     * Builds a new {@link BandwidthClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link BandwidthClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.messagingBasicAuthUserName = getMessagingBasicAuthUserName();
        builder.messagingBasicAuthPassword = getMessagingBasicAuthPassword();
        builder.twoFactorAuthBasicAuthUserName = getTwoFactorAuthBasicAuthUserName();
        builder.twoFactorAuthBasicAuthPassword = getTwoFactorAuthBasicAuthPassword();
        builder.voiceBasicAuthUserName = getVoiceBasicAuthUserName();
        builder.voiceBasicAuthPassword = getVoiceBasicAuthPassword();
        builder.webRtcBasicAuthUserName = getWebRtcBasicAuthUserName();
        builder.webRtcBasicAuthPassword = getWebRtcBasicAuthPassword();
        builder.httpClient = getHttpClient();
        builder.timeout = getTimeout();
        builder.authManagers = authManagers;
        builder.setHttpClientConfig(httpClientConfig);
        return builder;
    }

    /**
     * Class to build instances of {@link BandwidthClient}
     */
    public static class Builder {
        private Environment environment = Environment.PRODUCTION;
        private String messagingBasicAuthUserName = "TODO: Replace";
        private String messagingBasicAuthPassword = "TODO: Replace";
        private String twoFactorAuthBasicAuthUserName = "TODO: Replace";
        private String twoFactorAuthBasicAuthPassword = "TODO: Replace";
        private String voiceBasicAuthUserName = "TODO: Replace";
        private String voiceBasicAuthPassword = "TODO: Replace";
        private String webRtcBasicAuthUserName = "TODO: Replace";
        private String webRtcBasicAuthPassword = "TODO: Replace";
        private HttpClient httpClient;
        private long timeout = 0;
        private Map<String, AuthManager> authManagers = null;

        private HttpClientConfiguration httpClientConfig;

        /**
         * The username and password to use with basic authentication
         * @param messagingBasicAuthUserName
         * @param messagingBasicAuthPassword
         */
        public Builder messagingBasicAuthCredentials(String messagingBasicAuthUserName, String messagingBasicAuthPassword) {
            if (messagingBasicAuthUserName == null) {
                throw new NullPointerException("Username cannot be null.");
            }
            if (messagingBasicAuthPassword == null) {
                throw new NullPointerException("Password cannot be null.");
            }
            this.messagingBasicAuthUserName = messagingBasicAuthUserName;
            this.messagingBasicAuthPassword = messagingBasicAuthPassword;
            return this;
        }
        /**
         * The username and password to use with basic authentication
         * @param twoFactorAuthBasicAuthUserName
         * @param twoFactorAuthBasicAuthPassword
         */
        public Builder twoFactorAuthBasicAuthCredentials(String twoFactorAuthBasicAuthUserName, String twoFactorAuthBasicAuthPassword) {
            if (twoFactorAuthBasicAuthUserName == null) {
                throw new NullPointerException("Username cannot be null.");
            }
            if (twoFactorAuthBasicAuthPassword == null) {
                throw new NullPointerException("Password cannot be null.");
            }
            this.twoFactorAuthBasicAuthUserName = twoFactorAuthBasicAuthUserName;
            this.twoFactorAuthBasicAuthPassword = twoFactorAuthBasicAuthPassword;
            return this;
        }
        /**
         * The username and password to use with basic authentication
         * @param voiceBasicAuthUserName
         * @param voiceBasicAuthPassword
         */
        public Builder voiceBasicAuthCredentials(String voiceBasicAuthUserName, String voiceBasicAuthPassword) {
            if (voiceBasicAuthUserName == null) {
                throw new NullPointerException("Username cannot be null.");
            }
            if (voiceBasicAuthPassword == null) {
                throw new NullPointerException("Password cannot be null.");
            }
            this.voiceBasicAuthUserName = voiceBasicAuthUserName;
            this.voiceBasicAuthPassword = voiceBasicAuthPassword;
            return this;
        }
        /**
         * The username and password to use with basic authentication
         * @param webRtcBasicAuthUserName
         * @param webRtcBasicAuthPassword
         */
        public Builder webRtcBasicAuthCredentials(String webRtcBasicAuthUserName, String webRtcBasicAuthPassword) {
            if (webRtcBasicAuthUserName == null) {
                throw new NullPointerException("Username cannot be null.");
            }
            if (webRtcBasicAuthPassword == null) {
                throw new NullPointerException("Password cannot be null.");
            }
            this.webRtcBasicAuthUserName = webRtcBasicAuthUserName;
            this.webRtcBasicAuthPassword = webRtcBasicAuthPassword;
            return this;
        }
        /**
         * Current API environment
         * @param environment
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }
        /**
         * The timeout to use for making HTTP requests.
         * @param timeout must be greater then 0.
         */
        public Builder timeout(long timeout) {
            if (timeout > 0) {
                this.timeout = timeout;
            }
            return this;
        }

        private void setHttpClientConfig(ReadonlyHttpClientConfiguration httpClientConfig) {
            this.timeout = httpClientConfig.getTimeout();
        }

        /**
         * Builds a new BandwidthClient object using the set fields.
         * @return BandwidthClient
         */
        public BandwidthClient build() {
            httpClientConfig = new HttpClientConfiguration();
            httpClientConfig.setTimeout(timeout);
            httpClient = new OkClient(httpClientConfig);

            return new BandwidthClient(environment, messagingBasicAuthUserName, messagingBasicAuthPassword,
                    twoFactorAuthBasicAuthUserName, twoFactorAuthBasicAuthPassword, voiceBasicAuthUserName,
                    voiceBasicAuthPassword, webRtcBasicAuthUserName, webRtcBasicAuthPassword, httpClient, timeout,
                    httpClientConfig, authManagers);
        }
    }
}