/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.webrtc.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;


/**
 * This is a model class for Session type.
 */
public class Session {
    /**
     * Default constructor
     */
    public Session() {
    }

    /**
     * Initialization constructor.
     * @param id
     * @param participants
     * @param tag
     */
    public Session(
            String id,
            List<Participant> participants,
            String tag) {
        this.id = id;
        this.participants = participants;
        this.tag = tag;
    }

    private String id;
    private List<Participant> participants;
    private String tag;
    /**
     * Getter for Id.
     */
    @JsonGetter("id")
    public String getId() {
        return this.id;
    }
    /**
     * Setter for Id.
     */
    @JsonSetter("id")
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Getter for Participants.
     * The list of participants associated with this session
     */
    @JsonGetter("participants")
    public List<Participant> getParticipants() {
        return this.participants;
    }
    /**
     * Setter for Participants.
     * The list of participants associated with this session
     */
    @JsonSetter("participants")
    public void setParticipants(List<Participant> value) {
        this.participants = value;
    }

    /**
     * Getter for Tag.
     * User defined tag to associate with the session
     */
    @JsonGetter("tag")
    public String getTag() {
        return this.tag;
    }
    /**
     * Setter for Tag.
     * User defined tag to associate with the session
     */
    @JsonSetter("tag")
    public void setTag(String value) {
        this.tag = value;
    }

 

    /**
     * Builds a new {@link Session.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Session.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
            .id(getId())
            .participants(getParticipants())
            .tag(getTag());
            return builder;
    }

    /**
     * Class to build instances of {@link Session}
     */
    public static class Builder {
        private String id;
        private List<Participant> participants;
        private String tag;

        /**
         * Initialization constructor
         */
        public Builder() {
           
        }

        /**
         * Setter for id
         * @param id
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }
        /**
         * Setter for participants
         * @param participants
         * @return Builder
         */
        public Builder participants(List<Participant> participants) {
            this.participants = participants;
            return this;
        }
        /**
         * Setter for tag
         * @param tag
         * @return Builder
         */
        public Builder tag(String tag) {
            this.tag = tag;
            return this;
        }

        /**
         * Builds a new {@link Session} object using the set fields.
         * @return {@link Session}
         */
        public Session build() {
            return new Session(id,
                participants,
                tag);
        }
    }
}
