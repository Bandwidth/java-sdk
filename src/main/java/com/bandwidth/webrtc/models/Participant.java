/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.webrtc.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;


/**
 * This is a model class for Participant type.
 */
public class Participant {
    /**
     * Default constructor
     */
    public Participant() {
    }

    /**
     * Initialization constructor.
     * @param id
     * @param callbackUrl
     * @param publishPermissions
     * @param sessions
     * @param subscriptions
     * @param tag
     */
    public Participant(
            String id,
            String callbackUrl,
            List<PublishPermissionEnum> publishPermissions,
            List<String> sessions,
            Subscriptions subscriptions,
            String tag) {
        this.id = id;
        this.callbackUrl = callbackUrl;
        this.publishPermissions = publishPermissions;
        this.sessions = sessions;
        this.subscriptions = subscriptions;
        this.tag = tag;
    }

    private String id;
    private String callbackUrl;
    private List<PublishPermissionEnum> publishPermissions;
    private List<String> sessions;
    private Subscriptions subscriptions;
    private String tag;
    /**
     * Getter for Id.
     * Unique id of the participant
     */
    @JsonGetter("id")
    public String getId() {
        return this.id;
    }
    /**
     * Setter for Id.
     * Unique id of the participant
     */
    @JsonSetter("id")
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Getter for CallbackUrl.
     * Full callback url to use for notifications about this participant
     */
    @JsonGetter("callbackUrl")
    public String getCallbackUrl() {
        return this.callbackUrl;
    }
    /**
     * Setter for CallbackUrl.
     * Full callback url to use for notifications about this participant
     */
    @JsonSetter("callbackUrl")
    public void setCallbackUrl(String value) {
        this.callbackUrl = value;
    }

    /**
     * Getter for PublishPermissions.
     * Defines if this participant can publish audio or video
     */
    @JsonGetter("publishPermissions")
    public List<PublishPermissionEnum> getPublishPermissions() {
        return this.publishPermissions;
    }
    /**
     * Setter for PublishPermissions.
     * Defines if this participant can publish audio or video
     */
    @JsonSetter("publishPermissions")
    public void setPublishPermissions(List<PublishPermissionEnum> value) {
        this.publishPermissions = value;
    }

    /**
     * Getter for Sessions.
     * List of session ids this participant is associated with
     * Capped to one
     */
    @JsonGetter("sessions")
    public List<String> getSessions() {
        return this.sessions;
    }
    /**
     * Setter for Sessions.
     * List of session ids this participant is associated with
     * Capped to one
     */
    @JsonSetter("sessions")
    public void setSessions(List<String> value) {
        this.sessions = value;
    }

    /**
     * Getter for Subscriptions.
     */
    @JsonGetter("subscriptions")
    public Subscriptions getSubscriptions() {
        return this.subscriptions;
    }
    /**
     * Setter for Subscriptions.
     */
    @JsonSetter("subscriptions")
    public void setSubscriptions(Subscriptions value) {
        this.subscriptions = value;
    }

    /**
     * Getter for Tag.
     * User defined tag to associate with the participant
     */
    @JsonGetter("tag")
    public String getTag() {
        return this.tag;
    }
    /**
     * Setter for Tag.
     * User defined tag to associate with the participant
     */
    @JsonSetter("tag")
    public void setTag(String value) {
        this.tag = value;
    }

 

    /**
     * Builds a new {@link Participant.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Participant.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
            .id(getId())
            .callbackUrl(getCallbackUrl())
            .publishPermissions(getPublishPermissions())
            .sessions(getSessions())
            .subscriptions(getSubscriptions())
            .tag(getTag());
        return builder;
    }

    /**
     * Class to build instances of {@link Participant}
     */
    public static class Builder {
        private String id;
        private String callbackUrl;
        private List<PublishPermissionEnum> publishPermissions;
        private List<String> sessions;
        private Subscriptions subscriptions;
        private String tag;



        /**
         * Setter for id
         * @param id
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for callbackUrl
         * @param callbackUrl
         * @return Builder
         */
        public Builder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * Setter for publishPermissions
         * @param publishPermissions
         * @return Builder
         */
        public Builder publishPermissions(List<PublishPermissionEnum> publishPermissions) {
            this.publishPermissions = publishPermissions;
            return this;
        }

        /**
         * Setter for sessions
         * @param sessions
         * @return Builder
         */
        public Builder sessions(List<String> sessions) {
            this.sessions = sessions;
            return this;
        }

        /**
         * Setter for subscriptions
         * @param subscriptions
         * @return Builder
         */
        public Builder subscriptions(Subscriptions subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }

        /**
         * Setter for tag
         * @param tag
         * @return Builder
         */
        public Builder tag(String tag) {
            this.tag = tag;
            return this;
        }

        /**
         * Builds a new {@link Participant} object using the set fields.
         * @return {@link Participant}
         */
        public Participant build() {
            return new Participant(id,
                callbackUrl,
                publishPermissions,
                sessions,
                subscriptions,
                tag);
        }
    }
}
