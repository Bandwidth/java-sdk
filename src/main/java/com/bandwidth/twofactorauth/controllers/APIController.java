/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.twofactorauth.controllers;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.concurrent.CompletableFuture;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.bandwidth.ApiHelper;
import com.bandwidth.AuthManager;
import com.bandwidth.Configuration;
import com.bandwidth.controllers.BaseController;
import com.bandwidth.exceptions.ApiException;
import com.bandwidth.http.client.HttpClient;
import com.bandwidth.http.client.HttpContext;
import com.bandwidth.http.Headers;
import com.bandwidth.http.request.HttpRequest;
import com.bandwidth.http.response.ApiResponse;
import com.bandwidth.http.response.HttpResponse;
import com.bandwidth.http.response.HttpStringResponse;
import com.bandwidth.Server;
import com.bandwidth.twofactorauth.exceptions.InvalidRequestException;
import com.bandwidth.twofactorauth.models.TwoFactorCodeRequestSchema;
import com.bandwidth.twofactorauth.models.TwoFactorMessagingResponse;
import com.bandwidth.twofactorauth.models.TwoFactorVerifyCodeResponse;
import com.bandwidth.twofactorauth.models.TwoFactorVerifyRequestSchema;
import com.bandwidth.twofactorauth.models.TwoFactorVoiceResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIController extends BaseController {

    /**
     * Initializes the controller.
     * @param config
     * @param httpClient
     * @param authManagers
     */
    public APIController(Configuration config, HttpClient httpClient, Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Two-Factor authentication with Bandwidth Voice services
     * @param    accountId    Required parameter: Bandwidth Account ID with Voice service enabled
     * @param    body    Required parameter: Example: 
     * @return    Returns the ApiResponse<TwoFactorVoiceResponse> response from the API call
     */
    public ApiResponse<TwoFactorVoiceResponse> createVoiceTwoFactor(
            final String accountId,
            final TwoFactorCodeRequestSchema body) throws ApiException, IOException {
        HttpRequest request = buildCreateVoiceTwoFactorRequest(accountId, body);
        authManagers.get("twoFactorAuth").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleCreateVoiceTwoFactorResponse(context);
    }

    /**
     * Two-Factor authentication with Bandwidth Voice services
     * @param    accountId    Required parameter: Bandwidth Account ID with Voice service enabled
     * @param    body    Required parameter: Example: 
     * @return    Returns the ApiResponse<TwoFactorVoiceResponse> response from the API call 
     */
    public CompletableFuture<ApiResponse<TwoFactorVoiceResponse>> createVoiceTwoFactorAsync(
            final String accountId,
            final TwoFactorCodeRequestSchema body) {
        return makeHttpCallAsync(() -> buildCreateVoiceTwoFactorRequest(accountId, body),
                req -> authManagers.get("twoFactorAuth").applyAsync(req)
                    .thenCompose(request -> getClientInstance().executeAsStringAsync(request)),
                context -> handleCreateVoiceTwoFactorResponse(context));
    }

    /**
     * Builds the HttpRequest object for createVoiceTwoFactor
     */
    private HttpRequest buildCreateVoiceTwoFactorRequest(
            final String accountId,
            final TwoFactorCodeRequestSchema body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.TWOFACTORAUTHDEFAULT);

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri + "/accounts/{accountId}/code/voice");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId", new SimpleEntry<Object, Boolean>(accountId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createVoiceTwoFactor
     * @return An object of type TwoFactorVoiceResponse
     */
    private ApiResponse<TwoFactorVoiceResponse> handleCreateVoiceTwoFactorResponse(HttpContext context)
            throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new InvalidRequestException("client request error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse)response).getBody();
        TwoFactorVoiceResponse result = ApiHelper.deserialize(responseBody,
                TwoFactorVoiceResponse.class);

        return new ApiResponse<TwoFactorVoiceResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Two-Factor authentication with Bandwidth messaging services
     * @param    accountId    Required parameter: Bandwidth Account ID with Messaging service enabled
     * @param    body    Required parameter: Example: 
     * @return    Returns the ApiResponse<TwoFactorMessagingResponse> response from the API call
     */
    public ApiResponse<TwoFactorMessagingResponse> createMessagingTwoFactor(
            final String accountId,
            final TwoFactorCodeRequestSchema body) throws ApiException, IOException {
        HttpRequest request = buildCreateMessagingTwoFactorRequest(accountId, body);
        authManagers.get("twoFactorAuth").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleCreateMessagingTwoFactorResponse(context);
    }

    /**
     * Two-Factor authentication with Bandwidth messaging services
     * @param    accountId    Required parameter: Bandwidth Account ID with Messaging service enabled
     * @param    body    Required parameter: Example: 
     * @return    Returns the ApiResponse<TwoFactorMessagingResponse> response from the API call 
     */
    public CompletableFuture<ApiResponse<TwoFactorMessagingResponse>> createMessagingTwoFactorAsync(
            final String accountId,
            final TwoFactorCodeRequestSchema body) {
        return makeHttpCallAsync(() -> buildCreateMessagingTwoFactorRequest(accountId, body),
                req -> authManagers.get("twoFactorAuth").applyAsync(req)
                    .thenCompose(request -> getClientInstance().executeAsStringAsync(request)),
                context -> handleCreateMessagingTwoFactorResponse(context));
    }

    /**
     * Builds the HttpRequest object for createMessagingTwoFactor
     */
    private HttpRequest buildCreateMessagingTwoFactorRequest(
            final String accountId,
            final TwoFactorCodeRequestSchema body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.TWOFACTORAUTHDEFAULT);

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri + "/accounts/{accountId}/code/messaging");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId", new SimpleEntry<Object, Boolean>(accountId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createMessagingTwoFactor
     * @return An object of type TwoFactorMessagingResponse
     */
    private ApiResponse<TwoFactorMessagingResponse> handleCreateMessagingTwoFactorResponse(HttpContext context)
            throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new InvalidRequestException("client request error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse)response).getBody();
        TwoFactorMessagingResponse result = ApiHelper.deserialize(responseBody,
                TwoFactorMessagingResponse.class);

        return new ApiResponse<TwoFactorMessagingResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Verify a previously sent two-factor authentication code
     * @param    accountId    Required parameter: Bandwidth Account ID with Two-Factor enabled
     * @param    body    Required parameter: Example: 
     * @return    Returns the ApiResponse<TwoFactorVerifyCodeResponse> response from the API call
     */
    public ApiResponse<TwoFactorVerifyCodeResponse> createVerifyTwoFactor(
            final String accountId,
            final TwoFactorVerifyRequestSchema body) throws ApiException, IOException {
        HttpRequest request = buildCreateVerifyTwoFactorRequest(accountId, body);
        authManagers.get("twoFactorAuth").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleCreateVerifyTwoFactorResponse(context);
    }

    /**
     * Verify a previously sent two-factor authentication code
     * @param    accountId    Required parameter: Bandwidth Account ID with Two-Factor enabled
     * @param    body    Required parameter: Example: 
     * @return    Returns the ApiResponse<TwoFactorVerifyCodeResponse> response from the API call 
     */
    public CompletableFuture<ApiResponse<TwoFactorVerifyCodeResponse>> createVerifyTwoFactorAsync(
            final String accountId,
            final TwoFactorVerifyRequestSchema body) {
        return makeHttpCallAsync(() -> buildCreateVerifyTwoFactorRequest(accountId, body),
                req -> authManagers.get("twoFactorAuth").applyAsync(req)
                    .thenCompose(request -> getClientInstance().executeAsStringAsync(request)),
                context -> handleCreateVerifyTwoFactorResponse(context));
    }

    /**
     * Builds the HttpRequest object for createVerifyTwoFactor
     */
    private HttpRequest buildCreateVerifyTwoFactorRequest(
            final String accountId,
            final TwoFactorVerifyRequestSchema body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.TWOFACTORAUTHDEFAULT);

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri + "/accounts/{accountId}/code/verify");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId", new SimpleEntry<Object, Boolean>(accountId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createVerifyTwoFactor
     * @return An object of type TwoFactorVerifyCodeResponse
     */
    private ApiResponse<TwoFactorVerifyCodeResponse> handleCreateVerifyTwoFactorResponse(HttpContext context)
            throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new InvalidRequestException("client request error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse)response).getBody();
        TwoFactorVerifyCodeResponse result = ApiHelper.deserialize(responseBody,
                TwoFactorVerifyCodeResponse.class);

        return new ApiResponse<TwoFactorVerifyCodeResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

}