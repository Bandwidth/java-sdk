/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.twofactorauth.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;


/**
 * This is a model class for TwoFactorCodeRequestSchema type.
 */
public class TwoFactorCodeRequestSchema {
    /**
     * Default constructor
     */
    public TwoFactorCodeRequestSchema() {
    }

    /**
     * Initialization constructor.
     * @param to
     * @param from
     * @param applicationId
     * @param message
     * @param digits
     * @param scope
     */
    public TwoFactorCodeRequestSchema(
            String to,
            String from,
            String applicationId,
            String message,
            double digits,
            String scope) {
        this.to = to;
        this.from = from;
        this.applicationId = applicationId;
        this.scope = scope;
        this.message = message;
        this.digits = digits;
    }

    private String to;
    private String from;
    private String applicationId;
    private String scope;
    private String message;
    private double digits;
    /**
     * Getter for To.
     * The phone number to send the 2fa code to.
     */
    @JsonGetter("to")
    public String getTo() {
        return this.to;
    }
    /**
     * Setter for To.
     * The phone number to send the 2fa code to.
     */
    @JsonSetter("to")
    public void setTo(String to) {
        this.to = to;
    }

    /**
     * Getter for From.
     * The application phone number, the sender of the 2fa code.
     */
    @JsonGetter("from")
    public String getFrom() {
        return this.from;
    }
    /**
     * Setter for From.
     * The application phone number, the sender of the 2fa code.
     */
    @JsonSetter("from")
    public void setFrom(String from) {
        this.from = from;
    }

    /**
     * Getter for ApplicationId.
     * The application unique ID, obtained from Bandwidth.
     */
    @JsonGetter("applicationId")
    public String getApplicationId() {
        return this.applicationId;
    }
    /**
     * Setter for ApplicationId.
     * The application unique ID, obtained from Bandwidth.
     */
    @JsonSetter("applicationId")
    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * Getter for Scope.
     * An optional field to denote what scope or action the 2fa code is addressing.  If not supplied, defaults to "2FA".
     */
    @JsonGetter("scope")
    public String getScope() {
        return this.scope;
    }
    /**
     * Setter for Scope.
     * An optional field to denote what scope or action the 2fa code is addressing.  If not supplied, defaults to "2FA".
     */
    @JsonSetter("scope")
    public void setScope(String scope) {
        this.scope = scope;
    }

    /**
     * Getter for Message.
     * The message format of the 2fa code.  There are three values that the system will replace "{CODE}", "{NAME}", "{SCOPE}".  The "{SCOPE}" and "{NAME} value template are optional, while "{CODE}" must be supplied.  As the name would suggest, code will be replace with the actual 2fa code.  Name is replaced with the application name, configured during provisioning of 2fa.  The scope value is the same value sent during the call and partitioned by the server.
     */
    @JsonGetter("message")
    public String getMessage() {
        return this.message;
    }
    /**
     * Setter for Message.
     * The message format of the 2fa code.  There are three values that the system will replace "{CODE}", "{NAME}", "{SCOPE}".  The "{SCOPE}" and "{NAME} value template are optional, while "{CODE}" must be supplied.  As the name would suggest, code will be replace with the actual 2fa code.  Name is replaced with the application name, configured during provisioning of 2fa.  The scope value is the same value sent during the call and partitioned by the server.
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Getter for Digits.
     * The number of digits for your 2fa code.  The valid number ranges from 2 to 8, inclusively.
     */
    @JsonGetter("digits")
    public double getDigits() {
        return this.digits;
    }
    /**
     * Setter for Digits.
     * The number of digits for your 2fa code.  The valid number ranges from 2 to 8, inclusively.
     */
    @JsonSetter("digits")
    public void setDigits(double digits) {
        this.digits = digits;
    }

 

    /**
     * Builds a new {@link TwoFactorCodeRequestSchema.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TwoFactorCodeRequestSchema.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to,
            from,
            applicationId,
            message,
            digits)
            .scope(getScope());
        return builder;
    }

    /**
     * Class to build instances of {@link TwoFactorCodeRequestSchema}
     */
    public static class Builder {
        private String to;
        private String from;
        private String applicationId;
        private String message;
        private double digits;
        private String scope;

        /**
         * Initialization constructor
         */
        public Builder() {
        }

        /**
         * Initialization constructor
         */
        public Builder(String to,
                String from,
                String applicationId,
                String message,
                double digits) {
            this.to = to;
            this.from = from;
            this.applicationId = applicationId;
            this.message = message;
            this.digits = digits;
        }

        /**
         * Setter for to
         * @param to
         * @return Builder
         */
        public Builder to(String to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for from
         * @param from
         * @return Builder
         */
        public Builder from(String from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for applicationId
         * @param applicationId
         * @return Builder
         */
        public Builder applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        /**
         * Setter for message
         * @param message
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for digits
         * @param digits
         * @return Builder
         */
        public Builder digits(double digits) {
            this.digits = digits;
            return this;
        }

        /**
         * Setter for scope
         * @param scope
         * @return Builder
         */
        public Builder scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Builds a new {@link TwoFactorCodeRequestSchema} object using the set fields.
         * @return {@link TwoFactorCodeRequestSchema}
         */
        public TwoFactorCodeRequestSchema build() {
            return new TwoFactorCodeRequestSchema(to,
                from,
                applicationId,
                message,
                digits,
                scope);
        }
    }
}
