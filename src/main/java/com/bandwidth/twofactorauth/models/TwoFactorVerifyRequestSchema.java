/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.twofactorauth.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;


/**
 * This is a model class for TwoFactorVerifyRequestSchema type.
 */
public class TwoFactorVerifyRequestSchema {
    /**
     * Default constructor
     */
    public TwoFactorVerifyRequestSchema() {
    }

    /**
     * Initialization constructor.
     * @param to
     * @param from
     * @param applicationId
     * @param digits
     * @param expirationTimeInMinutes
     * @param code
     * @param scope
     */
    public TwoFactorVerifyRequestSchema(
            String to,
            String from,
            String applicationId,
            double digits,
            double expirationTimeInMinutes,
            String code,
            String scope) {
        this.to = to;
        this.from = from;
        this.applicationId = applicationId;
        this.scope = scope;
        this.digits = digits;
        this.expirationTimeInMinutes = expirationTimeInMinutes;
        this.code = code;
    }

    private String to;
    private String from;
    private String applicationId;
    private String scope;
    private double digits;
    private double expirationTimeInMinutes;
    private String code;
    /**
     * Getter for To.
     * The phone number to send the 2fa code to.
     */
    @JsonGetter("to")
    public String getTo() {
        return this.to;
    }
    /**
     * Setter for To.
     * The phone number to send the 2fa code to.
     */
    @JsonSetter("to")
    public void setTo(String to) {
        this.to = to;
    }

    /**
     * Getter for From.
     * The application phone number, the sender of the 2fa code.
     */
    @JsonGetter("from")
    public String getFrom() {
        return this.from;
    }
    /**
     * Setter for From.
     * The application phone number, the sender of the 2fa code.
     */
    @JsonSetter("from")
    public void setFrom(String from) {
        this.from = from;
    }

    /**
     * Getter for ApplicationId.
     * The application unique ID, obtained from Bandwidth.
     */
    @JsonGetter("applicationId")
    public String getApplicationId() {
        return this.applicationId;
    }
    /**
     * Setter for ApplicationId.
     * The application unique ID, obtained from Bandwidth.
     */
    @JsonSetter("applicationId")
    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * Getter for Scope.
     * An optional field to denote what scope or action the 2fa code is addressing.  If not supplied, defaults to "2FA".
     */
    @JsonGetter("scope")
    public String getScope() {
        return this.scope;
    }
    /**
     * Setter for Scope.
     * An optional field to denote what scope or action the 2fa code is addressing.  If not supplied, defaults to "2FA".
     */
    @JsonSetter("scope")
    public void setScope(String scope) {
        this.scope = scope;
    }

    /**
     * Getter for Digits.
     * The number of digits for your 2fa code.  The valid number ranges from 2 to 8, inclusively.
     */
    @JsonGetter("digits")
    public double getDigits() {
        return this.digits;
    }
    /**
     * Setter for Digits.
     * The number of digits for your 2fa code.  The valid number ranges from 2 to 8, inclusively.
     */
    @JsonSetter("digits")
    public void setDigits(double digits) {
        this.digits = digits;
    }

    /**
     * Getter for ExpirationTimeInMinutes.
     * The time period, in minutes, to validate the 2fa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.
     */
    @JsonGetter("expirationTimeInMinutes")
    public double getExpirationTimeInMinutes() {
        return this.expirationTimeInMinutes;
    }
    /**
     * Setter for ExpirationTimeInMinutes.
     * The time period, in minutes, to validate the 2fa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.
     */
    @JsonSetter("expirationTimeInMinutes")
    public void setExpirationTimeInMinutes(double expirationTimeInMinutes) {
        this.expirationTimeInMinutes = expirationTimeInMinutes;
    }

    /**
     * Getter for Code.
     * The generated 2fa code to check if valid
     */
    @JsonGetter("code")
    public String getCode() {
        return this.code;
    }
    /**
     * Setter for Code.
     * The generated 2fa code to check if valid
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = code;
    }

 

    /**
     * Builds a new {@link TwoFactorVerifyRequestSchema.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TwoFactorVerifyRequestSchema.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to,
            from,
            applicationId,
            digits,
            expirationTimeInMinutes,
            code)
            .scope(getScope());
        return builder;
    }

    /**
     * Class to build instances of {@link TwoFactorVerifyRequestSchema}
     */
    public static class Builder {
        private String to;
        private String from;
        private String applicationId;
        private double digits;
        private double expirationTimeInMinutes;
        private String code;
        private String scope;

        /**
         * Initialization constructor
         */
        public Builder() {
        }

        /**
         * Initialization constructor
         */
        public Builder(String to,
                String from,
                String applicationId,
                double digits,
                double expirationTimeInMinutes,
                String code) {
            this.to = to;
            this.from = from;
            this.applicationId = applicationId;
            this.digits = digits;
            this.expirationTimeInMinutes = expirationTimeInMinutes;
            this.code = code;
        }

        /**
         * Setter for to
         * @param to
         * @return Builder
         */
        public Builder to(String to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for from
         * @param from
         * @return Builder
         */
        public Builder from(String from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for applicationId
         * @param applicationId
         * @return Builder
         */
        public Builder applicationId(String applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        /**
         * Setter for digits
         * @param digits
         * @return Builder
         */
        public Builder digits(double digits) {
            this.digits = digits;
            return this;
        }

        /**
         * Setter for expirationTimeInMinutes
         * @param expirationTimeInMinutes
         * @return Builder
         */
        public Builder expirationTimeInMinutes(double expirationTimeInMinutes) {
            this.expirationTimeInMinutes = expirationTimeInMinutes;
            return this;
        }

        /**
         * Setter for code
         * @param code
         * @return Builder
         */
        public Builder code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Setter for scope
         * @param scope
         * @return Builder
         */
        public Builder scope(String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Builds a new {@link TwoFactorVerifyRequestSchema} object using the set fields.
         * @return {@link TwoFactorVerifyRequestSchema}
         */
        public TwoFactorVerifyRequestSchema build() {
            return new TwoFactorVerifyRequestSchema(to,
                from,
                applicationId,
                digits,
                expirationTimeInMinutes,
                code,
                scope);
        }
    }
}
