/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.messaging.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class MessageRequest {
    /**
     * Default constructor
     */
    public MessageRequest() {
    }

    public MessageRequest(
            String applicationId,
            List<String> to,
            String from,
            String text,
            List<String> media,
            String tag) {
        this.applicationId = applicationId;
        this.to = to;
        this.from = from;
        this.text = text;
        this.media = media;
        this.tag = tag;
    }

    private String applicationId;
    private List<String> to;
    private String from;
    private String text;
    private List<String> media;
    private String tag;
    /**
     * Getter for ApplicationId.
     */
    @JsonGetter("applicationId")
    public String getApplicationId() { 
        return this.applicationId;
    }
    /**
     * Setter for ApplicationId.
     */
    @JsonSetter("applicationId")
    public void setApplicationId(String value) { 
        this.applicationId = value;
    }

    /**
     * Getter for To.
     */
    @JsonGetter("to")
    public List<String> getTo() { 
        return this.to;
    }
    /**
     * Setter for To.
     */
    @JsonSetter("to")
    public void setTo(List<String> value) { 
        this.to = value;
    }

    /**
     * Getter for From.
     */
    @JsonGetter("from")
    public String getFrom() { 
        return this.from;
    }
    /**
     * Setter for From.
     */
    @JsonSetter("from")
    public void setFrom(String value) { 
        this.from = value;
    }

    /**
     * Getter for Text.
     */
    @JsonGetter("text")
    public String getText() { 
        return this.text;
    }
    /**
     * Setter for Text.
     */
    @JsonSetter("text")
    public void setText(String value) { 
        this.text = value;
    }

    /**
     * Getter for Media.
     */
    @JsonGetter("media")
    public List<String> getMedia() { 
        return this.media;
    }
    /**
     * Setter for Media.
     */
    @JsonSetter("media")
    public void setMedia(List<String> value) { 
        this.media = value;
    }

    /**
     * Getter for Tag.
     */
    @JsonGetter("tag")
    public String getTag() { 
        return this.tag;
    }
    /**
     * Setter for Tag.
     */
    @JsonSetter("tag")
    public void setTag(String value) { 
        this.tag = value;
    }

 
    public Builder toBuilder() {
        Builder builder = new Builder()
            .applicationId(getApplicationId())
            .to(getTo())
            .from(getFrom())
            .text(getText())
            .media(getMedia())
            .tag(getTag());
            return builder;
    }

    public static class Builder {
        private String applicationId;
        private List<String> to;
        private String from;
        private String text;
        private List<String> media;
        private String tag;

        public Builder() { }

        public Builder applicationId(String value) {
            applicationId = value;
            return this;
        }
        public Builder to(List<String> value) {
            to = value;
            return this;
        }
        public Builder from(String value) {
            from = value;
            return this;
        }
        public Builder text(String value) {
            text = value;
            return this;
        }
        public Builder media(List<String> value) {
            media = value;
            return this;
        }
        public Builder tag(String value) {
            tag = value;
            return this;
        }

        public MessageRequest build() {
            return new MessageRequest(applicationId,
                to,
                from,
                text,
                media,
                tag);
        }
    }
}
