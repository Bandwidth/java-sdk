/*
 * MessagingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.messaging.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.bandwidth.messaging.*;
import com.bandwidth.messaging.models.*;
import com.bandwidth.messaging.exceptions.*;
import com.bandwidth.messaging.http.client.HttpClient;
import com.bandwidth.messaging.http.client.HttpContext;
import com.bandwidth.messaging.http.request.HttpRequest;
import com.bandwidth.messaging.http.response.HttpResponse;
import com.bandwidth.messaging.http.response.HttpStringResponse;
import com.bandwidth.messaging.http.client.APICallBack;
import com.bandwidth.messaging.controllers.syncwrapper.APICallBackCatcher;

public class APIController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static APIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the APIController class 
     */
    public static APIController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new APIController();
                }
            }
        }
        return instance;
    }

    /**
     * getMessage
     * @return    Returns the void response from the API call 
     */
    public void getMessage(
    ) throws Throwable {

        HttpRequest _request = _buildGetMessageRequest();
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleGetMessageResponse(_context);
    }

    /**
     * getMessage
     * @return    Returns the void response from the API call 
     */
    public void getMessageAsync(
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMessageRequest();
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleGetMessageResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMessage
     */
    private HttpRequest _buildGetMessageRequest() throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/ping");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMessage
     * @return An object of type void
     */
    private void _handleGetMessageResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new BandwidthException("400 request is malformed or invalid", _context);
        }
        if (_responseCode == 401) {
            throw new BandwidthException("401 The specified user does not have access to the account", _context);
        }
        if (_responseCode == 403) {
            throw new BandwidthException("403  The user does not have access to the API", _context);
        }
        if (_responseCode == 404) {
            throw new BandwidthNotFoundException("404 he call-id is no longer active, or the path is not found", _context);
        }
        if (_responseCode == 409) {
            throw new BandwidthException("409 Error when modifying a call that is unable to be modified", _context);
        }
        if (_responseCode == 415) {
            throw new BandwidthException("415 The content-type of the request is incorrect", _context);
        }
        if (_responseCode == 429) {
            throw new BandwidthRateLimitErrorException("429 The rate limit has been reached", _context);
        }
        if (_responseCode == 500) {
            throw new BandwidthException("500 Unknown server error", _context);
        }
        if (_responseCode == 503) {
            throw new BandwidthException("503 The service is unavailable for some reason", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * listMedia
     * @param    userId    Required parameter: Example: 
     * @param    continuationToken    Optional parameter: Example: 
     * @return    Returns the List<Media> response from the API call 
     */
    public List<Media> listMedia(
                final String userId,
                final String continuationToken
    ) throws Throwable {

        HttpRequest _request = _buildListMediaRequest(userId, continuationToken);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleListMediaResponse(_context);
    }

    /**
     * listMedia
     * @param    userId    Required parameter: Example: 
     * @param    continuationToken    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void listMediaAsync(
                final String userId,
                final String continuationToken,
                final APICallBack<List<Media>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildListMediaRequest(userId, continuationToken);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<Media> returnValue = _handleListMediaResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for listMedia
     */
    private HttpRequest _buildListMediaRequest(
                final String userId,
                final String continuationToken) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/users/{userId}/media");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("userId", userId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (continuationToken != null) {
            _headers.put("Continuation-Token", continuationToken);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for listMedia
     * @return An object of type void
     */
    private List<Media> _handleListMediaResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new BandwidthException("400 request is malformed or invalid", _context);
        }
        if (_responseCode == 401) {
            throw new BandwidthException("401 The specified user does not have access to the account", _context);
        }
        if (_responseCode == 403) {
            throw new BandwidthException("403  The user does not have access to the API", _context);
        }
        if (_responseCode == 404) {
            throw new BandwidthNotFoundException("404 he call-id is no longer active, or the path is not found", _context);
        }
        if (_responseCode == 409) {
            throw new BandwidthException("409 Error when modifying a call that is unable to be modified", _context);
        }
        if (_responseCode == 415) {
            throw new BandwidthException("415 The content-type of the request is incorrect", _context);
        }
        if (_responseCode == 429) {
            throw new BandwidthRateLimitErrorException("429 The rate limit has been reached", _context);
        }
        if (_responseCode == 500) {
            throw new BandwidthException("500 Unknown server error", _context);
        }
        if (_responseCode == 503) {
            throw new BandwidthException("503 The service is unavailable for some reason", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<Media> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<Media>>(){});

        return _result;
    }

    /**
     * getMedia
     * @param    userId    Required parameter: Example: 
     * @param    mediaId    Required parameter: Example: 
     * @return    Returns the InputStream response from the API call 
     */
    public InputStream getMedia(
                final String userId,
                final String mediaId
    ) throws Throwable {

        HttpRequest _request = _buildGetMediaRequest(userId, mediaId);
        HttpResponse _response = getClientInstance().executeAsBinary(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMediaResponse(_context);
    }

    /**
     * getMedia
     * @param    userId    Required parameter: Example: 
     * @param    mediaId    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getMediaAsync(
                final String userId,
                final String mediaId,
                final APICallBack<InputStream> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetMediaRequest(userId, mediaId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsBinaryAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            InputStream returnValue = _handleGetMediaResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getMedia
     */
    private HttpRequest _buildGetMediaRequest(
                final String userId,
                final String mediaId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/users/{userId}/media/{mediaId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("userId", userId);
        _templateParameters.put("mediaId", mediaId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getMedia
     * @return An object of type void
     */
    private InputStream _handleGetMediaResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new BandwidthException("400 request is malformed or invalid", _context);
        }
        if (_responseCode == 401) {
            throw new BandwidthException("401 The specified user does not have access to the account", _context);
        }
        if (_responseCode == 403) {
            throw new BandwidthException("403  The user does not have access to the API", _context);
        }
        if (_responseCode == 404) {
            throw new BandwidthNotFoundException("404 he call-id is no longer active, or the path is not found", _context);
        }
        if (_responseCode == 409) {
            throw new BandwidthException("409 Error when modifying a call that is unable to be modified", _context);
        }
        if (_responseCode == 415) {
            throw new BandwidthException("415 The content-type of the request is incorrect", _context);
        }
        if (_responseCode == 429) {
            throw new BandwidthRateLimitErrorException("429 The rate limit has been reached", _context);
        }
        if (_responseCode == 500) {
            throw new BandwidthException("500 Unknown server error", _context);
        }
        if (_responseCode == 503) {
            throw new BandwidthException("503 The service is unavailable for some reason", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        InputStream _result = _response.getRawBody();
        return _result;
    }

    /**
     * uploadMedia
     * @param    userId    Required parameter: Example: 
     * @param    mediaId    Required parameter: Example: 
     * @param    contentLength    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Optional parameter: Example: 
     * @param    cacheControl    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void uploadMedia(
                final String userId,
                final String mediaId,
                final long contentLength,
                final String body,
                final String contentType,
                final String cacheControl
    ) throws Throwable {

        HttpRequest _request = _buildUploadMediaRequest(userId, mediaId, contentLength, body, contentType, cacheControl);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleUploadMediaResponse(_context);
    }

    /**
     * uploadMedia
     * @param    userId    Required parameter: Example: 
     * @param    mediaId    Required parameter: Example: 
     * @param    contentLength    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Optional parameter: Example: 
     * @param    cacheControl    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void uploadMediaAsync(
                final String userId,
                final String mediaId,
                final long contentLength,
                final String body,
                final String contentType,
                final String cacheControl,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUploadMediaRequest(userId, mediaId, contentLength, body, contentType, cacheControl);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleUploadMediaResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for uploadMedia
     */
    private HttpRequest _buildUploadMediaRequest(
                final String userId,
                final String mediaId,
                final long contentLength,
                final String body,
                final String contentType,
                final String cacheControl) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/users/{userId}/media/{mediaId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("userId", userId);
        _templateParameters.put("mediaId", mediaId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Length", Integer.toString(contentLength));
        if (contentType != null) {
            _headers.put("Content-Type", contentType);
        }
        if (cacheControl != null) {
            _headers.put("Cache-Control", cacheControl);
        }
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, body,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for uploadMedia
     * @return An object of type void
     */
    private void _handleUploadMediaResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new BandwidthException("400 request is malformed or invalid", _context);
        }
        if (_responseCode == 401) {
            throw new BandwidthException("401 The specified user does not have access to the account", _context);
        }
        if (_responseCode == 403) {
            throw new BandwidthException("403  The user does not have access to the API", _context);
        }
        if (_responseCode == 404) {
            throw new BandwidthNotFoundException("404 he call-id is no longer active, or the path is not found", _context);
        }
        if (_responseCode == 409) {
            throw new BandwidthException("409 Error when modifying a call that is unable to be modified", _context);
        }
        if (_responseCode == 415) {
            throw new BandwidthException("415 The content-type of the request is incorrect", _context);
        }
        if (_responseCode == 429) {
            throw new BandwidthRateLimitErrorException("429 The rate limit has been reached", _context);
        }
        if (_responseCode == 500) {
            throw new BandwidthException("500 Unknown server error", _context);
        }
        if (_responseCode == 503) {
            throw new BandwidthException("503 The service is unavailable for some reason", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * deleteMedia
     * @param    userId    Required parameter: Example: 
     * @param    mediaId    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void deleteMedia(
                final String userId,
                final String mediaId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteMediaRequest(userId, mediaId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleDeleteMediaResponse(_context);
    }

    /**
     * deleteMedia
     * @param    userId    Required parameter: Example: 
     * @param    mediaId    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void deleteMediaAsync(
                final String userId,
                final String mediaId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteMediaRequest(userId, mediaId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleDeleteMediaResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteMedia
     */
    private HttpRequest _buildDeleteMediaRequest(
                final String userId,
                final String mediaId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/users/{userId}/media/{mediaId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("userId", userId);
        _templateParameters.put("mediaId", mediaId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteMedia
     * @return An object of type void
     */
    private void _handleDeleteMediaResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new BandwidthException("400 request is malformed or invalid", _context);
        }
        if (_responseCode == 401) {
            throw new BandwidthException("401 The specified user does not have access to the account", _context);
        }
        if (_responseCode == 403) {
            throw new BandwidthException("403  The user does not have access to the API", _context);
        }
        if (_responseCode == 404) {
            throw new BandwidthNotFoundException("404 he call-id is no longer active, or the path is not found", _context);
        }
        if (_responseCode == 409) {
            throw new BandwidthException("409 Error when modifying a call that is unable to be modified", _context);
        }
        if (_responseCode == 415) {
            throw new BandwidthException("415 The content-type of the request is incorrect", _context);
        }
        if (_responseCode == 429) {
            throw new BandwidthRateLimitErrorException("429 The rate limit has been reached", _context);
        }
        if (_responseCode == 500) {
            throw new BandwidthException("500 Unknown server error", _context);
        }
        if (_responseCode == 503) {
            throw new BandwidthException("503 The service is unavailable for some reason", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * createMessage
     * @param    userId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the DeferredResultResponseEntityMessage response from the API call 
     */
    public DeferredResultResponseEntityMessage createMessage(
                final String userId,
                final MessageRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateMessageRequest(userId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateMessageResponse(_context);
    }

    /**
     * createMessage
     * @param    userId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createMessageAsync(
                final String userId,
                final MessageRequest body,
                final APICallBack<DeferredResultResponseEntityMessage> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateMessageRequest(userId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DeferredResultResponseEntityMessage returnValue = _handleCreateMessageResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createMessage
     */
    private HttpRequest _buildCreateMessageRequest(
                final String userId,
                final MessageRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/users/{userId}/messages");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("userId", userId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createMessage
     * @return An object of type void
     */
    private DeferredResultResponseEntityMessage _handleCreateMessageResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new BandwidthException("400 request is malformed or invalid", _context);
        }
        if (_responseCode == 401) {
            throw new BandwidthException("401 The specified user does not have access to the account", _context);
        }
        if (_responseCode == 403) {
            throw new BandwidthException("403  The user does not have access to the API", _context);
        }
        if (_responseCode == 404) {
            throw new BandwidthNotFoundException("404 he call-id is no longer active, or the path is not found", _context);
        }
        if (_responseCode == 409) {
            throw new BandwidthException("409 Error when modifying a call that is unable to be modified", _context);
        }
        if (_responseCode == 415) {
            throw new BandwidthException("415 The content-type of the request is incorrect", _context);
        }
        if (_responseCode == 429) {
            throw new BandwidthRateLimitErrorException("429 The rate limit has been reached", _context);
        }
        if (_responseCode == 500) {
            throw new BandwidthException("500 Unknown server error", _context);
        }
        if (_responseCode == 503) {
            throw new BandwidthException("503 The service is unavailable for some reason", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DeferredResultResponseEntityMessage _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeferredResultResponseEntityMessage>(){});

        return _result;
    }

}
