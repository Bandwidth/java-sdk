/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bandwidth.sdk.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The possible status callbacks when sending an MT SMS or MMS or RBM message: - &#x60;message-sending&#x60; indicates that Bandwidth is sending the message to the upstream provider. - &#x60;message-delivered&#x60; indicates that the message was successfully sent. - &#x60;message-failed&#x60; indicates that the message could not be sent to the intended recipient. - &#x60;message-read&#x60; indicates that the RBM message was read by the recipient.
 */
@JsonAdapter(StatusCallbackTypeEnum.Adapter.class)
public enum StatusCallbackTypeEnum {
  
  SENDING("message-sending"),
  
  DELIVERED("message-delivered"),
  
  FAILED("message-failed"),
  
  READ("message-read");

  private String value;

  StatusCallbackTypeEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static StatusCallbackTypeEnum fromValue(String value) {
    for (StatusCallbackTypeEnum b : StatusCallbackTypeEnum.values()) {
      if (b.value.equalsIgnoreCase(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<StatusCallbackTypeEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final StatusCallbackTypeEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public StatusCallbackTypeEnum read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return StatusCallbackTypeEnum.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    StatusCallbackTypeEnum.fromValue(value);
  }
}

