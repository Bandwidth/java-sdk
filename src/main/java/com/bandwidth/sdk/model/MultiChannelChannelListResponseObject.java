/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bandwidth.sdk.model;

import java.util.Objects;
import java.util.Locale;
import com.bandwidth.sdk.model.MmsMessageContent;
import com.bandwidth.sdk.model.MultiChannelChannelListMMSResponseObject;
import com.bandwidth.sdk.model.MultiChannelChannelListRBMResponseObject;
import com.bandwidth.sdk.model.MultiChannelChannelListSMSResponseObject;
import com.bandwidth.sdk.model.MultiChannelMessageChannelEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.bandwidth.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class MultiChannelChannelListResponseObject extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MultiChannelChannelListResponseObject.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MultiChannelChannelListResponseObject.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MultiChannelChannelListResponseObject' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MultiChannelChannelListRBMResponseObject> adapterMultiChannelChannelListRBMResponseObject = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelChannelListRBMResponseObject.class));
            final TypeAdapter<MultiChannelChannelListSMSResponseObject> adapterMultiChannelChannelListSMSResponseObject = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelChannelListSMSResponseObject.class));
            final TypeAdapter<MultiChannelChannelListMMSResponseObject> adapterMultiChannelChannelListMMSResponseObject = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelChannelListMMSResponseObject.class));

            return (TypeAdapter<T>) new TypeAdapter<MultiChannelChannelListResponseObject>() {
                @Override
                public void write(JsonWriter out, MultiChannelChannelListResponseObject value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MultiChannelChannelListRBMResponseObject`
                    if (value.getActualInstance() instanceof MultiChannelChannelListRBMResponseObject) {
                        JsonElement element = adapterMultiChannelChannelListRBMResponseObject.toJsonTree((MultiChannelChannelListRBMResponseObject)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MultiChannelChannelListSMSResponseObject`
                    if (value.getActualInstance() instanceof MultiChannelChannelListSMSResponseObject) {
                        JsonElement element = adapterMultiChannelChannelListSMSResponseObject.toJsonTree((MultiChannelChannelListSMSResponseObject)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MultiChannelChannelListMMSResponseObject`
                    if (value.getActualInstance() instanceof MultiChannelChannelListMMSResponseObject) {
                        JsonElement element = adapterMultiChannelChannelListMMSResponseObject.toJsonTree((MultiChannelChannelListMMSResponseObject)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: MultiChannelChannelListMMSResponseObject, MultiChannelChannelListRBMResponseObject, MultiChannelChannelListSMSResponseObject");
                }

                @Override
                public MultiChannelChannelListResponseObject read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    MultiChannelChannelListResponseObject newMultiChannelChannelListResponseObject = new MultiChannelChannelListResponseObject();
                    if (jsonObject.get("channel") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for MultiChannelChannelListResponseObject as `channel` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `channel`
                        switch (jsonObject.get("channel").getAsString()) {
                            case "MMS":
                                deserialized = adapterMultiChannelChannelListMMSResponseObject.fromJsonTree(jsonObject);
                                newMultiChannelChannelListResponseObject.setActualInstance(deserialized);
                                return newMultiChannelChannelListResponseObject;
                            case "RBM":
                                deserialized = adapterMultiChannelChannelListRBMResponseObject.fromJsonTree(jsonObject);
                                newMultiChannelChannelListResponseObject.setActualInstance(deserialized);
                                return newMultiChannelChannelListResponseObject;
                            case "SMS":
                                deserialized = adapterMultiChannelChannelListSMSResponseObject.fromJsonTree(jsonObject);
                                newMultiChannelChannelListResponseObject.setActualInstance(deserialized);
                                return newMultiChannelChannelListResponseObject;
                            default:
                                log.log(Level.WARNING, String.format(Locale.ROOT, "Failed to lookup discriminator value `%s` for MultiChannelChannelListResponseObject. Possible values: MMS RBM SMS", jsonObject.get("channel").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize MultiChannelChannelListRBMResponseObject
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelChannelListRBMResponseObject.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelChannelListRBMResponseObject;
                        MultiChannelChannelListResponseObject ret = new MultiChannelChannelListResponseObject();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListRBMResponseObject failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelChannelListRBMResponseObject'", e);
                    }
                    // deserialize MultiChannelChannelListSMSResponseObject
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelChannelListSMSResponseObject.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelChannelListSMSResponseObject;
                        MultiChannelChannelListResponseObject ret = new MultiChannelChannelListResponseObject();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListSMSResponseObject failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelChannelListSMSResponseObject'", e);
                    }
                    // deserialize MultiChannelChannelListMMSResponseObject
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelChannelListMMSResponseObject.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelChannelListMMSResponseObject;
                        MultiChannelChannelListResponseObject ret = new MultiChannelChannelListResponseObject();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListMMSResponseObject failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelChannelListMMSResponseObject'", e);
                    }

                    throw new IOException(String.format(Locale.ROOT, "Failed deserialization for MultiChannelChannelListResponseObject: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public MultiChannelChannelListResponseObject() {
        super("anyOf", Boolean.FALSE);
    }

    public MultiChannelChannelListResponseObject(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MultiChannelChannelListRBMResponseObject", MultiChannelChannelListRBMResponseObject.class);
        schemas.put("MultiChannelChannelListSMSResponseObject", MultiChannelChannelListSMSResponseObject.class);
        schemas.put("MultiChannelChannelListMMSResponseObject", MultiChannelChannelListMMSResponseObject.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return MultiChannelChannelListResponseObject.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * MultiChannelChannelListMMSResponseObject, MultiChannelChannelListRBMResponseObject, MultiChannelChannelListSMSResponseObject
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MultiChannelChannelListRBMResponseObject) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultiChannelChannelListSMSResponseObject) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultiChannelChannelListMMSResponseObject) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MultiChannelChannelListMMSResponseObject, MultiChannelChannelListRBMResponseObject, MultiChannelChannelListSMSResponseObject");
    }

    /**
     * Get the actual instance, which can be the following:
     * MultiChannelChannelListMMSResponseObject, MultiChannelChannelListRBMResponseObject, MultiChannelChannelListSMSResponseObject
     *
     * @return The actual instance (MultiChannelChannelListMMSResponseObject, MultiChannelChannelListRBMResponseObject, MultiChannelChannelListSMSResponseObject)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelChannelListRBMResponseObject`. If the actual instance is not `MultiChannelChannelListRBMResponseObject`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelChannelListRBMResponseObject`
     * @throws ClassCastException if the instance is not `MultiChannelChannelListRBMResponseObject`
     */
    public MultiChannelChannelListRBMResponseObject getMultiChannelChannelListRBMResponseObject() throws ClassCastException {
        return (MultiChannelChannelListRBMResponseObject)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelChannelListSMSResponseObject`. If the actual instance is not `MultiChannelChannelListSMSResponseObject`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelChannelListSMSResponseObject`
     * @throws ClassCastException if the instance is not `MultiChannelChannelListSMSResponseObject`
     */
    public MultiChannelChannelListSMSResponseObject getMultiChannelChannelListSMSResponseObject() throws ClassCastException {
        return (MultiChannelChannelListSMSResponseObject)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelChannelListMMSResponseObject`. If the actual instance is not `MultiChannelChannelListMMSResponseObject`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelChannelListMMSResponseObject`
     * @throws ClassCastException if the instance is not `MultiChannelChannelListMMSResponseObject`
     */
    public MultiChannelChannelListMMSResponseObject getMultiChannelChannelListMMSResponseObject() throws ClassCastException {
        return (MultiChannelChannelListMMSResponseObject)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MultiChannelChannelListResponseObject
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with MultiChannelChannelListRBMResponseObject
        try {
            MultiChannelChannelListRBMResponseObject.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListRBMResponseObject failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MultiChannelChannelListSMSResponseObject
        try {
            MultiChannelChannelListSMSResponseObject.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListSMSResponseObject failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MultiChannelChannelListMMSResponseObject
        try {
            MultiChannelChannelListMMSResponseObject.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListMMSResponseObject failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format(Locale.ROOT, "The JSON string is invalid for MultiChannelChannelListResponseObject with anyOf schemas: MultiChannelChannelListMMSResponseObject, MultiChannelChannelListRBMResponseObject, MultiChannelChannelListSMSResponseObject. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of MultiChannelChannelListResponseObject given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MultiChannelChannelListResponseObject
     * @throws IOException if the JSON string is invalid with respect to MultiChannelChannelListResponseObject
     */
    public static MultiChannelChannelListResponseObject fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MultiChannelChannelListResponseObject.class);
    }

    /**
     * Convert an instance of MultiChannelChannelListResponseObject to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

