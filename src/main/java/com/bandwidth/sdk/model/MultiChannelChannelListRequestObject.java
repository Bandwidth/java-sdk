/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bandwidth.sdk.model;

import java.util.Objects;
import java.util.Locale;
import com.bandwidth.sdk.model.MmsMessageContent;
import com.bandwidth.sdk.model.MultiChannelChannelListMMSObject;
import com.bandwidth.sdk.model.MultiChannelChannelListRBMObject;
import com.bandwidth.sdk.model.MultiChannelChannelListSMSObject;
import com.bandwidth.sdk.model.MultiChannelMessageChannelEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.bandwidth.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class MultiChannelChannelListRequestObject extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MultiChannelChannelListRequestObject.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MultiChannelChannelListRequestObject.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MultiChannelChannelListRequestObject' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MultiChannelChannelListRBMObject> adapterMultiChannelChannelListRBMObject = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelChannelListRBMObject.class));
            final TypeAdapter<MultiChannelChannelListSMSObject> adapterMultiChannelChannelListSMSObject = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelChannelListSMSObject.class));
            final TypeAdapter<MultiChannelChannelListMMSObject> adapterMultiChannelChannelListMMSObject = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelChannelListMMSObject.class));

            return (TypeAdapter<T>) new TypeAdapter<MultiChannelChannelListRequestObject>() {
                @Override
                public void write(JsonWriter out, MultiChannelChannelListRequestObject value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MultiChannelChannelListRBMObject`
                    if (value.getActualInstance() instanceof MultiChannelChannelListRBMObject) {
                        JsonElement element = adapterMultiChannelChannelListRBMObject.toJsonTree((MultiChannelChannelListRBMObject)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MultiChannelChannelListSMSObject`
                    if (value.getActualInstance() instanceof MultiChannelChannelListSMSObject) {
                        JsonElement element = adapterMultiChannelChannelListSMSObject.toJsonTree((MultiChannelChannelListSMSObject)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MultiChannelChannelListMMSObject`
                    if (value.getActualInstance() instanceof MultiChannelChannelListMMSObject) {
                        JsonElement element = adapterMultiChannelChannelListMMSObject.toJsonTree((MultiChannelChannelListMMSObject)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: MultiChannelChannelListMMSObject, MultiChannelChannelListRBMObject, MultiChannelChannelListSMSObject");
                }

                @Override
                public MultiChannelChannelListRequestObject read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    MultiChannelChannelListRequestObject newMultiChannelChannelListRequestObject = new MultiChannelChannelListRequestObject();
                    if (jsonObject.get("channel") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for MultiChannelChannelListRequestObject as `channel` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `channel`
                        switch (jsonObject.get("channel").getAsString()) {
                            case "MMS":
                                deserialized = adapterMultiChannelChannelListMMSObject.fromJsonTree(jsonObject);
                                newMultiChannelChannelListRequestObject.setActualInstance(deserialized);
                                return newMultiChannelChannelListRequestObject;
                            case "RBM":
                                deserialized = adapterMultiChannelChannelListRBMObject.fromJsonTree(jsonObject);
                                newMultiChannelChannelListRequestObject.setActualInstance(deserialized);
                                return newMultiChannelChannelListRequestObject;
                            case "SMS":
                                deserialized = adapterMultiChannelChannelListSMSObject.fromJsonTree(jsonObject);
                                newMultiChannelChannelListRequestObject.setActualInstance(deserialized);
                                return newMultiChannelChannelListRequestObject;
                            default:
                                log.log(Level.WARNING, String.format(Locale.ROOT, "Failed to lookup discriminator value `%s` for MultiChannelChannelListRequestObject. Possible values: MMS RBM SMS", jsonObject.get("channel").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize MultiChannelChannelListRBMObject
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelChannelListRBMObject.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelChannelListRBMObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MultiChannelChannelListRBMObject'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListRBMObject failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelChannelListRBMObject'", e);
                    }
                    // deserialize MultiChannelChannelListSMSObject
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelChannelListSMSObject.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelChannelListSMSObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MultiChannelChannelListSMSObject'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListSMSObject failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelChannelListSMSObject'", e);
                    }
                    // deserialize MultiChannelChannelListMMSObject
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelChannelListMMSObject.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelChannelListMMSObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MultiChannelChannelListMMSObject'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListMMSObject failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelChannelListMMSObject'", e);
                    }

                    if (match == 1) {
                        MultiChannelChannelListRequestObject ret = new MultiChannelChannelListRequestObject();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format(Locale.ROOT, "Failed deserialization for MultiChannelChannelListRequestObject: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public MultiChannelChannelListRequestObject() {
        super("oneOf", Boolean.FALSE);
    }

    public MultiChannelChannelListRequestObject(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MultiChannelChannelListRBMObject", MultiChannelChannelListRBMObject.class);
        schemas.put("MultiChannelChannelListSMSObject", MultiChannelChannelListSMSObject.class);
        schemas.put("MultiChannelChannelListMMSObject", MultiChannelChannelListMMSObject.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return MultiChannelChannelListRequestObject.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * MultiChannelChannelListMMSObject, MultiChannelChannelListRBMObject, MultiChannelChannelListSMSObject
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MultiChannelChannelListRBMObject) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultiChannelChannelListSMSObject) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultiChannelChannelListMMSObject) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MultiChannelChannelListMMSObject, MultiChannelChannelListRBMObject, MultiChannelChannelListSMSObject");
    }

    /**
     * Get the actual instance, which can be the following:
     * MultiChannelChannelListMMSObject, MultiChannelChannelListRBMObject, MultiChannelChannelListSMSObject
     *
     * @return The actual instance (MultiChannelChannelListMMSObject, MultiChannelChannelListRBMObject, MultiChannelChannelListSMSObject)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelChannelListRBMObject`. If the actual instance is not `MultiChannelChannelListRBMObject`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelChannelListRBMObject`
     * @throws ClassCastException if the instance is not `MultiChannelChannelListRBMObject`
     */
    public MultiChannelChannelListRBMObject getMultiChannelChannelListRBMObject() throws ClassCastException {
        return (MultiChannelChannelListRBMObject)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelChannelListSMSObject`. If the actual instance is not `MultiChannelChannelListSMSObject`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelChannelListSMSObject`
     * @throws ClassCastException if the instance is not `MultiChannelChannelListSMSObject`
     */
    public MultiChannelChannelListSMSObject getMultiChannelChannelListSMSObject() throws ClassCastException {
        return (MultiChannelChannelListSMSObject)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelChannelListMMSObject`. If the actual instance is not `MultiChannelChannelListMMSObject`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelChannelListMMSObject`
     * @throws ClassCastException if the instance is not `MultiChannelChannelListMMSObject`
     */
    public MultiChannelChannelListMMSObject getMultiChannelChannelListMMSObject() throws ClassCastException {
        return (MultiChannelChannelListMMSObject)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MultiChannelChannelListRequestObject
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with MultiChannelChannelListRBMObject
        try {
            MultiChannelChannelListRBMObject.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListRBMObject failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MultiChannelChannelListSMSObject
        try {
            MultiChannelChannelListSMSObject.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListSMSObject failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MultiChannelChannelListMMSObject
        try {
            MultiChannelChannelListMMSObject.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelChannelListMMSObject failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format(Locale.ROOT, "The JSON string is invalid for MultiChannelChannelListRequestObject with oneOf schemas: MultiChannelChannelListMMSObject, MultiChannelChannelListRBMObject, MultiChannelChannelListSMSObject. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of MultiChannelChannelListRequestObject given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MultiChannelChannelListRequestObject
     * @throws IOException if the JSON string is invalid with respect to MultiChannelChannelListRequestObject
     */
    public static MultiChannelChannelListRequestObject fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MultiChannelChannelListRequestObject.class);
    }

    /**
     * Convert an instance of MultiChannelChannelListRequestObject to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

