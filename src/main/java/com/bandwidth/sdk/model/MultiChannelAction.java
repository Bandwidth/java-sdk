/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bandwidth.sdk.model;

import java.util.Objects;
import java.util.Locale;
import com.bandwidth.sdk.model.MultiChannelActionCalendarEvent;
import com.bandwidth.sdk.model.RbmActionBase;
import com.bandwidth.sdk.model.RbmActionDial;
import com.bandwidth.sdk.model.RbmActionOpenUrl;
import com.bandwidth.sdk.model.RbmActionTypeEnum;
import com.bandwidth.sdk.model.RbmActionViewLocation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.bandwidth.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class MultiChannelAction extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MultiChannelAction.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MultiChannelAction.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MultiChannelAction' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RbmActionBase> adapterRbmActionBase = gson.getDelegateAdapter(this, TypeToken.get(RbmActionBase.class));
            final TypeAdapter<RbmActionDial> adapterRbmActionDial = gson.getDelegateAdapter(this, TypeToken.get(RbmActionDial.class));
            final TypeAdapter<RbmActionViewLocation> adapterRbmActionViewLocation = gson.getDelegateAdapter(this, TypeToken.get(RbmActionViewLocation.class));
            final TypeAdapter<MultiChannelActionCalendarEvent> adapterMultiChannelActionCalendarEvent = gson.getDelegateAdapter(this, TypeToken.get(MultiChannelActionCalendarEvent.class));
            final TypeAdapter<RbmActionOpenUrl> adapterRbmActionOpenUrl = gson.getDelegateAdapter(this, TypeToken.get(RbmActionOpenUrl.class));

            return (TypeAdapter<T>) new TypeAdapter<MultiChannelAction>() {
                @Override
                public void write(JsonWriter out, MultiChannelAction value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `RbmActionBase`
                    if (value.getActualInstance() instanceof RbmActionBase) {
                        JsonElement element = adapterRbmActionBase.toJsonTree((RbmActionBase)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RbmActionDial`
                    if (value.getActualInstance() instanceof RbmActionDial) {
                        JsonElement element = adapterRbmActionDial.toJsonTree((RbmActionDial)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RbmActionViewLocation`
                    if (value.getActualInstance() instanceof RbmActionViewLocation) {
                        JsonElement element = adapterRbmActionViewLocation.toJsonTree((RbmActionViewLocation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MultiChannelActionCalendarEvent`
                    if (value.getActualInstance() instanceof MultiChannelActionCalendarEvent) {
                        JsonElement element = adapterMultiChannelActionCalendarEvent.toJsonTree((MultiChannelActionCalendarEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RbmActionOpenUrl`
                    if (value.getActualInstance() instanceof RbmActionOpenUrl) {
                        JsonElement element = adapterRbmActionOpenUrl.toJsonTree((RbmActionOpenUrl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: MultiChannelActionCalendarEvent, RbmActionBase, RbmActionDial, RbmActionOpenUrl, RbmActionViewLocation");
                }

                @Override
                public MultiChannelAction read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    MultiChannelAction newMultiChannelAction = new MultiChannelAction();
                    if (jsonObject.get("type") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for MultiChannelAction as `type` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `type`
                        switch (jsonObject.get("type").getAsString()) {
                            case "CREATE_CALENDAR_EVENT":
                                deserialized = adapterMultiChannelActionCalendarEvent.fromJsonTree(jsonObject);
                                newMultiChannelAction.setActualInstance(deserialized);
                                return newMultiChannelAction;
                            case "DIAL_PHONE":
                                deserialized = adapterRbmActionDial.fromJsonTree(jsonObject);
                                newMultiChannelAction.setActualInstance(deserialized);
                                return newMultiChannelAction;
                            case "OPEN_URL":
                                deserialized = adapterRbmActionOpenUrl.fromJsonTree(jsonObject);
                                newMultiChannelAction.setActualInstance(deserialized);
                                return newMultiChannelAction;
                            case "REPLY":
                                deserialized = adapterRbmActionBase.fromJsonTree(jsonObject);
                                newMultiChannelAction.setActualInstance(deserialized);
                                return newMultiChannelAction;
                            case "REQUEST_LOCATION":
                                deserialized = adapterRbmActionBase.fromJsonTree(jsonObject);
                                newMultiChannelAction.setActualInstance(deserialized);
                                return newMultiChannelAction;
                            case "SHOW_LOCATION":
                                deserialized = adapterRbmActionViewLocation.fromJsonTree(jsonObject);
                                newMultiChannelAction.setActualInstance(deserialized);
                                return newMultiChannelAction;
                            default:
                                log.log(Level.WARNING, String.format(Locale.ROOT, "Failed to lookup discriminator value `%s` for MultiChannelAction. Possible values: CREATE_CALENDAR_EVENT DIAL_PHONE OPEN_URL REPLY REQUEST_LOCATION SHOW_LOCATION", jsonObject.get("type").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize RbmActionBase
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RbmActionBase.validateJsonElement(jsonElement);
                        actualAdapter = adapterRbmActionBase;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RbmActionBase'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionBase failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RbmActionBase'", e);
                    }
                    // deserialize RbmActionDial
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RbmActionDial.validateJsonElement(jsonElement);
                        actualAdapter = adapterRbmActionDial;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RbmActionDial'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionDial failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RbmActionDial'", e);
                    }
                    // deserialize RbmActionViewLocation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RbmActionViewLocation.validateJsonElement(jsonElement);
                        actualAdapter = adapterRbmActionViewLocation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RbmActionViewLocation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionViewLocation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RbmActionViewLocation'", e);
                    }
                    // deserialize MultiChannelActionCalendarEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiChannelActionCalendarEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiChannelActionCalendarEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MultiChannelActionCalendarEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelActionCalendarEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiChannelActionCalendarEvent'", e);
                    }
                    // deserialize RbmActionOpenUrl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RbmActionOpenUrl.validateJsonElement(jsonElement);
                        actualAdapter = adapterRbmActionOpenUrl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RbmActionOpenUrl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionOpenUrl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RbmActionOpenUrl'", e);
                    }

                    if (match == 1) {
                        MultiChannelAction ret = new MultiChannelAction();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format(Locale.ROOT, "Failed deserialization for MultiChannelAction: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public MultiChannelAction() {
        super("oneOf", Boolean.FALSE);
    }

    public MultiChannelAction(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("RbmActionBase", RbmActionBase.class);
        schemas.put("RbmActionDial", RbmActionDial.class);
        schemas.put("RbmActionViewLocation", RbmActionViewLocation.class);
        schemas.put("MultiChannelActionCalendarEvent", MultiChannelActionCalendarEvent.class);
        schemas.put("RbmActionOpenUrl", RbmActionOpenUrl.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return MultiChannelAction.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * MultiChannelActionCalendarEvent, RbmActionBase, RbmActionDial, RbmActionOpenUrl, RbmActionViewLocation
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof RbmActionBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RbmActionDial) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RbmActionViewLocation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultiChannelActionCalendarEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RbmActionOpenUrl) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MultiChannelActionCalendarEvent, RbmActionBase, RbmActionDial, RbmActionOpenUrl, RbmActionViewLocation");
    }

    /**
     * Get the actual instance, which can be the following:
     * MultiChannelActionCalendarEvent, RbmActionBase, RbmActionDial, RbmActionOpenUrl, RbmActionViewLocation
     *
     * @return The actual instance (MultiChannelActionCalendarEvent, RbmActionBase, RbmActionDial, RbmActionOpenUrl, RbmActionViewLocation)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `RbmActionBase`. If the actual instance is not `RbmActionBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RbmActionBase`
     * @throws ClassCastException if the instance is not `RbmActionBase`
     */
    public RbmActionBase getRbmActionBase() throws ClassCastException {
        return (RbmActionBase)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RbmActionDial`. If the actual instance is not `RbmActionDial`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RbmActionDial`
     * @throws ClassCastException if the instance is not `RbmActionDial`
     */
    public RbmActionDial getRbmActionDial() throws ClassCastException {
        return (RbmActionDial)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RbmActionViewLocation`. If the actual instance is not `RbmActionViewLocation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RbmActionViewLocation`
     * @throws ClassCastException if the instance is not `RbmActionViewLocation`
     */
    public RbmActionViewLocation getRbmActionViewLocation() throws ClassCastException {
        return (RbmActionViewLocation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MultiChannelActionCalendarEvent`. If the actual instance is not `MultiChannelActionCalendarEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiChannelActionCalendarEvent`
     * @throws ClassCastException if the instance is not `MultiChannelActionCalendarEvent`
     */
    public MultiChannelActionCalendarEvent getMultiChannelActionCalendarEvent() throws ClassCastException {
        return (MultiChannelActionCalendarEvent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RbmActionOpenUrl`. If the actual instance is not `RbmActionOpenUrl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RbmActionOpenUrl`
     * @throws ClassCastException if the instance is not `RbmActionOpenUrl`
     */
    public RbmActionOpenUrl getRbmActionOpenUrl() throws ClassCastException {
        return (RbmActionOpenUrl)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MultiChannelAction
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with RbmActionBase
        try {
            RbmActionBase.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionBase failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RbmActionDial
        try {
            RbmActionDial.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionDial failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RbmActionViewLocation
        try {
            RbmActionViewLocation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionViewLocation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MultiChannelActionCalendarEvent
        try {
            MultiChannelActionCalendarEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for MultiChannelActionCalendarEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RbmActionOpenUrl
        try {
            RbmActionOpenUrl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for RbmActionOpenUrl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format(Locale.ROOT, "The JSON string is invalid for MultiChannelAction with oneOf schemas: MultiChannelActionCalendarEvent, RbmActionBase, RbmActionDial, RbmActionOpenUrl, RbmActionViewLocation. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of MultiChannelAction given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MultiChannelAction
     * @throws IOException if the JSON string is invalid with respect to MultiChannelAction
     */
    public static MultiChannelAction fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MultiChannelAction.class);
    }

    /**
     * Convert an instance of MultiChannelAction to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

