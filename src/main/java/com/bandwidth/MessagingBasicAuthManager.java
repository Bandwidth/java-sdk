/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth;

import java.util.Base64;
import java.util.concurrent.CompletableFuture;

import com.bandwidth.http.request.HttpRequest;

/**
 * Utility class for authorization and token management
 */
public class MessagingBasicAuthManager implements AuthManager, MessagingBasicAuthCredentials {

    private String basicAuthUserName;

    private String basicAuthPassword;

    /**
     * @return basicAuthUserName
     */
    public String getBasicAuthUserName() {
        return basicAuthUserName;
    }

    /**
     * @return basicAuthPassword
     */
    public String getBasicAuthPassword() {
        return basicAuthPassword;
    }

    /**
     * @return true if credentials matched.
     */
    public boolean equals(String basicAuthUserName, String basicAuthPassword) {
        return basicAuthUserName.equals(getBasicAuthUserName())
                && basicAuthPassword.equals(getBasicAuthPassword());
    }

    /**
     * Constructor
     */
    public MessagingBasicAuthManager(String username, String password) {
        this.basicAuthUserName = username;
        this.basicAuthPassword = password;
    }

    /**
     * Adds authentication to the given HttpRequest
     */
    public HttpRequest apply(HttpRequest httpRequest) {
        String authCredentials = basicAuthUserName + ":" + basicAuthPassword;
        httpRequest.getHeaders().add("Authorization", "Basic " + Base64.getEncoder().encodeToString(authCredentials.getBytes()));
        return httpRequest;
    }

    /**
     * Asynchronously adds authentication to the given HttpRequest
     */
    public CompletableFuture<HttpRequest> applyAsync(HttpRequest httpRequest) {
        String authCredentials = basicAuthUserName + ":" + basicAuthPassword;
        httpRequest.getHeaders().add("Authorization", "Basic " + Base64.getEncoder().encodeToString(authCredentials.getBytes()));
        return CompletableFuture.completedFuture(httpRequest);
    }
}
