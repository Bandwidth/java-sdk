/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.voice.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.bandwidth.*;
import com.bandwidth.controllers.*;
import com.bandwidth.exceptions.*;
import com.bandwidth.http.client.HttpClient;
import com.bandwidth.http.client.HttpContext;
import com.bandwidth.http.Headers;
import com.bandwidth.http.request.HttpRequest;
import com.bandwidth.http.response.ApiResponse;
import com.bandwidth.http.response.HttpResponse;
import com.bandwidth.http.response.HttpStringResponse;
import com.bandwidth.voice.exceptions.*;
import com.bandwidth.voice.models.*;

public final class APIController extends BaseController {
    public APIController(Configuration config, HttpClient httpClient, Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Creates a call request
     * @param    accountId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the ApiResponse<ApiCallResponse> response from the API call
     */
    public ApiResponse<ApiCallResponse> createCall(
            final String accountId,
            final ApiCreateCallRequest body
    ) throws ApiException, IOException {
        HttpRequest _request = _buildCreateCallRequest(accountId, body);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateCallResponse(_context);
    }

    /**
     * Creates a call request
     * @param    accountId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the ApiResponse<ApiCallResponse> response from the API call 
     */
    public CompletableFuture<ApiResponse<ApiCallResponse>> createCallAsync(
            final String accountId,
            final ApiCreateCallRequest body
    ) {
        return makeHttpCallAsync(() -> _buildCreateCallRequest(accountId, body),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleCreateCallResponse(_context));
    }

    /**
     * Builds the HttpRequest object for createCall
     */
    private HttpRequest _buildCreateCallRequest(
            final String accountId,
            final ApiCreateCallRequest body
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);
        _headers.add("accept", "application/json");
        _headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String _bodyJson = ApiHelper.serialize(body);
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);

        return _request;
    }

    /**
     * Processes the response for createCall
     * @return An object of type ApiCallResponse
     */
    private ApiResponse<ApiCallResponse> _handleCreateCallResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ErrorResponseException("Something didn't look right about that request. Please fix it before trying again.", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ApiCallResponse _result = ApiHelper.deserialize(_responseBody,
                ApiCallResponse.class);

        return new ApiResponse<ApiCallResponse>(_response.getStatusCode(), _response.getHeaders(), _result);
    }

    /**
     * Interrupts and replaces an active call's BXML document
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the ApiResponse<Void> response from the API call
     */
    public ApiResponse<Void> modifyCall(
            final String accountId,
            final String callId,
            final ApiModifyCallRequest body
    ) throws ApiException, IOException {
        HttpRequest _request = _buildModifyCallRequest(accountId, callId, body);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleModifyCallResponse(_context);
    }

    /**
     * Interrupts and replaces an active call's BXML document
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the ApiResponse<Void> response from the API call 
     */
    public CompletableFuture<ApiResponse<Void>> modifyCallAsync(
            final String accountId,
            final String callId,
            final ApiModifyCallRequest body
    ) {
        return makeHttpCallAsync(() -> _buildModifyCallRequest(accountId, callId, body),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleModifyCallResponse(_context));
    }

    /**
     * Builds the HttpRequest object for modifyCall
     */
    private HttpRequest _buildModifyCallRequest(
            final String accountId,
            final String callId,
            final ApiModifyCallRequest body
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls/{callId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        _templateParameters.put("callId", callId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);
        _headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String _bodyJson = ApiHelper.serialize(body);
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, _bodyJson);

        return _request;
    }

    /**
     * Processes the response for modifyCall
     * @return An object of type void
     */
    private ApiResponse<Void> _handleModifyCallResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ApiException("The call can't be modified in its current state", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 404) {
            throw new ApiException("The call never existed, no longer exists, or is inaccessible to you", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        return new ApiResponse<Void>(_response.getStatusCode(), _response.getHeaders(), null);
    }

    /**
     * Pauses or resumes a recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the ApiResponse<Void> response from the API call
     */
    public ApiResponse<Void> modifyCallRecordingState(
            final String accountId,
            final String callId,
            final ModifyCallRecordingState body
    ) throws ApiException, IOException {
        HttpRequest _request = _buildModifyCallRecordingStateRequest(accountId, callId, body);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleModifyCallRecordingStateResponse(_context);
    }

    /**
     * Pauses or resumes a recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    body    Optional parameter: Example: 
     * @return    Returns the ApiResponse<Void> response from the API call 
     */
    public CompletableFuture<ApiResponse<Void>> modifyCallRecordingStateAsync(
            final String accountId,
            final String callId,
            final ModifyCallRecordingState body
    ) {
        return makeHttpCallAsync(() -> _buildModifyCallRecordingStateRequest(accountId, callId, body),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleModifyCallRecordingStateResponse(_context));
    }

    /**
     * Builds the HttpRequest object for modifyCallRecordingState
     */
    private HttpRequest _buildModifyCallRecordingStateRequest(
            final String accountId,
            final String callId,
            final ModifyCallRecordingState body
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls/{callId}/recording");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        _templateParameters.put("callId", callId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);
        _headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String _bodyJson = ApiHelper.serialize(body);
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, _bodyJson);

        return _request;
    }

    /**
     * Processes the response for modifyCallRecordingState
     * @return An object of type void
     */
    private ApiResponse<Void> _handleModifyCallRecordingStateResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ApiException("The call can't be modified in its current state", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 404) {
            throw new ApiException("The call never existed, no longer exists, or is inaccessible to you", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        return new ApiResponse<Void>(_response.getStatusCode(), _response.getHeaders(), null);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the specified call
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @return    Returns the ApiResponse<List<RecordingMetadataResponse>> response from the API call
     */
    public ApiResponse<List<RecordingMetadataResponse>> getQueryMetadataForAccountAndCall(
            final String accountId,
            final String callId
    ) throws ApiException, IOException {
        HttpRequest _request = _buildGetQueryMetadataForAccountAndCallRequest(accountId, callId);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetQueryMetadataForAccountAndCallResponse(_context);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the specified call
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @return    Returns the ApiResponse<List<RecordingMetadataResponse>> response from the API call 
     */
    public CompletableFuture<ApiResponse<List<RecordingMetadataResponse>>> getQueryMetadataForAccountAndCallAsync(
            final String accountId,
            final String callId
    ) {
        return makeHttpCallAsync(() -> _buildGetQueryMetadataForAccountAndCallRequest(accountId, callId),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleGetQueryMetadataForAccountAndCallResponse(_context));
    }

    /**
     * Builds the HttpRequest object for getQueryMetadataForAccountAndCall
     */
    private HttpRequest _buildGetQueryMetadataForAccountAndCallRequest(
            final String accountId,
            final String callId
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls/{callId}/recordings");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        _templateParameters.put("callId", callId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);
        _headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        return _request;
    }

    /**
     * Processes the response for getQueryMetadataForAccountAndCall
     * @return An object of type List<RecordingMetadataResponse>
     */
    private ApiResponse<List<RecordingMetadataResponse>> _handleGetQueryMetadataForAccountAndCallResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ErrorResponseException("Something didn't look right about that request. Please fix it before trying again.", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<RecordingMetadataResponse> _result = ApiHelper.deserializeArray(_responseBody,
                RecordingMetadataResponse[].class);
        return new ApiResponse<List<RecordingMetadataResponse>>(_response.getStatusCode(), _response.getHeaders(), _result);
    }

    /**
     * Returns metadata for the specified recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    recordingId    Required parameter: Example: 
     * @return    Returns the ApiResponse<RecordingMetadataResponse> response from the API call
     */
    public ApiResponse<RecordingMetadataResponse> getMetadataForRecording(
            final String accountId,
            final String callId,
            final String recordingId
    ) throws ApiException, IOException {
        HttpRequest _request = _buildGetMetadataForRecordingRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetMetadataForRecordingResponse(_context);
    }

    /**
     * Returns metadata for the specified recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    recordingId    Required parameter: Example: 
     * @return    Returns the ApiResponse<RecordingMetadataResponse> response from the API call 
     */
    public CompletableFuture<ApiResponse<RecordingMetadataResponse>> getMetadataForRecordingAsync(
            final String accountId,
            final String callId,
            final String recordingId
    ) {
        return makeHttpCallAsync(() -> _buildGetMetadataForRecordingRequest(accountId, callId, recordingId),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleGetMetadataForRecordingResponse(_context));
    }

    /**
     * Builds the HttpRequest object for getMetadataForRecording
     */
    private HttpRequest _buildGetMetadataForRecordingRequest(
            final String accountId,
            final String callId,
            final String recordingId
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        _templateParameters.put("callId", callId);
        _templateParameters.put("recordingId", recordingId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);
        _headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        return _request;
    }

    /**
     * Processes the response for getMetadataForRecording
     * @return An object of type RecordingMetadataResponse
     */
    private ApiResponse<RecordingMetadataResponse> _handleGetMetadataForRecordingResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ErrorResponseException("Something didn't look right about that request. Please fix it before trying again.", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 404) {
            throw new ApiException("The recording never existed, no longer exists, or is inaccessible to you", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RecordingMetadataResponse _result = ApiHelper.deserialize(_responseBody,
                RecordingMetadataResponse.class);

        return new ApiResponse<RecordingMetadataResponse>(_response.getStatusCode(), _response.getHeaders(), _result);
    }

    /**
     * Deletes the specified recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    recordingId    Required parameter: Example: 
     * @return    Returns the ApiResponse<Void> response from the API call
     */
    public ApiResponse<Void> deleteRecording(
            final String accountId,
            final String callId,
            final String recordingId
    ) throws ApiException, IOException {
        HttpRequest _request = _buildDeleteRecordingRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteRecordingResponse(_context);
    }

    /**
     * Deletes the specified recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    recordingId    Required parameter: Example: 
     * @return    Returns the ApiResponse<Void> response from the API call 
     */
    public CompletableFuture<ApiResponse<Void>> deleteRecordingAsync(
            final String accountId,
            final String callId,
            final String recordingId
    ) {
        return makeHttpCallAsync(() -> _buildDeleteRecordingRequest(accountId, callId, recordingId),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleDeleteRecordingResponse(_context));
    }

    /**
     * Builds the HttpRequest object for deleteRecording
     */
    private HttpRequest _buildDeleteRecordingRequest(
            final String accountId,
            final String callId,
            final String recordingId
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        _templateParameters.put("callId", callId);
        _templateParameters.put("recordingId", recordingId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        return _request;
    }

    /**
     * Processes the response for deleteRecording
     * @return An object of type void
     */
    private ApiResponse<Void> _handleDeleteRecordingResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ErrorResponseException("Something didn't look right about that request. Please fix it before trying again.", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 404) {
            throw new ApiException("The recording never existed, no longer exists, or is inaccessible to you", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        return new ApiResponse<Void>(_response.getStatusCode(), _response.getHeaders(), null);
    }

    /**
     * Downloads the specified recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    recordingId    Required parameter: Example: 
     * @return    Returns the ApiResponse<InputStream> response from the API call
     */
    public ApiResponse<InputStream> getStreamRecordingMedia(
            final String accountId,
            final String callId,
            final String recordingId
    ) throws ApiException, IOException {
        HttpRequest _request = _buildGetStreamRecordingMediaRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsBinary(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetStreamRecordingMediaResponse(_context);
    }

    /**
     * Downloads the specified recording
     * @param    accountId    Required parameter: Example: 
     * @param    callId    Required parameter: Example: 
     * @param    recordingId    Required parameter: Example: 
     * @return    Returns the ApiResponse<InputStream> response from the API call 
     */
    public CompletableFuture<ApiResponse<InputStream>> getStreamRecordingMediaAsync(
            final String accountId,
            final String callId,
            final String recordingId
    ) {
        return makeHttpCallAsync(() -> _buildGetStreamRecordingMediaRequest(accountId, callId, recordingId),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleGetStreamRecordingMediaResponse(_context));
    }

    /**
     * Builds the HttpRequest object for getStreamRecordingMedia
     */
    private HttpRequest _buildGetStreamRecordingMediaRequest(
            final String accountId,
            final String callId,
            final String recordingId
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        _templateParameters.put("callId", callId);
        _templateParameters.put("recordingId", recordingId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        return _request;
    }

    /**
     * Processes the response for getStreamRecordingMedia
     * @return An object of type InputStream
     */
    private ApiResponse<InputStream> _handleGetStreamRecordingMediaResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ErrorResponseException("Something didn't look right about that request. Please fix it before trying again.", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 404) {
            throw new ApiException("The recording never existed, no longer exists, or is inaccessible to you", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        InputStream _result = _response.getRawBody();
        return new ApiResponse<InputStream>(_response.getStatusCode(), _response.getHeaders(), _result);
    }

    /**
     * Returns a (potentially empty; capped at 1000) list of metadata for the recordings associated with the specified account
     * @param    accountId    Required parameter: Example: 
     * @return    Returns the ApiResponse<List<RecordingMetadataResponse>> response from the API call
     */
    public ApiResponse<List<RecordingMetadataResponse>> getQueryMetadataForAccount(
            final String accountId
    ) throws ApiException, IOException {
        HttpRequest _request = _buildGetQueryMetadataForAccountRequest(accountId);
        authManagers.get("voice").apply(_request);

        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetQueryMetadataForAccountResponse(_context);
    }

    /**
     * Returns a (potentially empty; capped at 1000) list of metadata for the recordings associated with the specified account
     * @param    accountId    Required parameter: Example: 
     * @return    Returns the ApiResponse<List<RecordingMetadataResponse>> response from the API call 
     */
    public CompletableFuture<ApiResponse<List<RecordingMetadataResponse>>> getQueryMetadataForAccountAsync(
            final String accountId
    ) {
        return makeHttpCallAsync(() -> _buildGetQueryMetadataForAccountRequest(accountId),
                _req -> authManagers.get("voice").applyAsync(_req)
                    .thenCompose(_request -> getClientInstance().executeAsStringAsync(_request)),
                _context -> _handleGetQueryMetadataForAccountResponse(_context));
    }

    /**
     * Builds the HttpRequest object for getQueryMetadataForAccount
     */
    private HttpRequest _buildGetQueryMetadataForAccountRequest(
            final String accountId
    ) {
        //the base uri for api requests
        String _baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api/v2/accounts/{accountId}/recordings");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountId", accountId);
        ApiHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters, true);
        //validate and preprocess url
        String _queryUrl = ApiHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Headers _headers = new Headers();
        _headers.add("user-agent", BaseController.userAgent);
        _headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        return _request;
    }

    /**
     * Processes the response for getQueryMetadataForAccount
     * @return An object of type List<RecordingMetadataResponse>
     */
    private ApiResponse<List<RecordingMetadataResponse>> _handleGetQueryMetadataForAccountResponse(HttpContext _context)
            throws ApiException, IOException {
        HttpResponse _response = _context.getResponse();

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ErrorResponseException("Something didn't look right about that request. Please fix it before trying again.", _context);
        }
        if (_responseCode == 401) {
            throw new ApiException("Please authenticate yourself", _context);
        }
        if (_responseCode == 403) {
            throw new ErrorResponseException("Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.", _context);
        }
        if (_responseCode == 415) {
            throw new ErrorResponseException("We don't support that media type. Please send us `application/json`.", _context);
        }
        if (_responseCode == 429) {
            throw new ErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorResponseException("Something unexpected happened. Please try again.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<RecordingMetadataResponse> _result = ApiHelper.deserializeArray(_responseBody,
                RecordingMetadataResponse[].class);
        return new ApiResponse<List<RecordingMetadataResponse>>(_response.getStatusCode(), _response.getHeaders(), _result);
    }

}