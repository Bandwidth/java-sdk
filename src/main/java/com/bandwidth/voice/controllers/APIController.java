/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package com.bandwidth.voice.controllers;

import com.bandwidth.ApiHelper;
import com.bandwidth.AuthManager;
import com.bandwidth.Configuration;
import com.bandwidth.Server;
import com.bandwidth.controllers.BaseController;
import com.bandwidth.exceptions.ApiException;
import com.bandwidth.http.Headers;
import com.bandwidth.http.client.HttpClient;
import com.bandwidth.http.client.HttpContext;
import com.bandwidth.http.request.HttpRequest;
import com.bandwidth.http.response.ApiResponse;
import com.bandwidth.http.response.HttpResponse;
import com.bandwidth.http.response.HttpStringResponse;
import com.bandwidth.voice.exceptions.ApiErrorResponseException;
import com.bandwidth.voice.models.ApiCallResponse;
import com.bandwidth.voice.models.ApiCallStateResponse;
import com.bandwidth.voice.models.ApiCreateCallRequest;
import com.bandwidth.voice.models.ApiModifyCallRequest;
import com.bandwidth.voice.models.ApiModifyConferenceRequest;
import com.bandwidth.voice.models.ApiTranscribeRecordingRequest;
import com.bandwidth.voice.models.ConferenceDetail;
import com.bandwidth.voice.models.ConferenceMemberDetail;
import com.bandwidth.voice.models.ConferenceRecordingMetadataResponse;
import com.bandwidth.voice.models.ModifyCallRecordingState;
import com.bandwidth.voice.models.RecordingMetadataResponse;
import com.bandwidth.voice.models.TranscriptionResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.io.InputStream;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public APIController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Creates an outbound call.
     * @param  accountId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the ApiCallResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ApiCallResponse> createCall(
            final String accountId,
            final ApiCreateCallRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateCallRequest(accountId, body);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleCreateCallResponse(context);
    }

    /**
     * Creates an outbound call.
     * @param  accountId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the ApiCallResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ApiCallResponse>> createCallAsync(
            final String accountId,
            final ApiCreateCallRequest body) {
        return makeHttpCallAsync(() -> buildCreateCallRequest(accountId, body),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleCreateCallResponse(context));
    }

    /**
     * Builds the HttpRequest object for createCall.
     */
    private HttpRequest buildCreateCallRequest(
            final String accountId,
            final ApiCreateCallRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createCall.
     * @return An object of type ApiCallResponse
     */
    private ApiResponse<ApiCallResponse> handleCreateCallResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ApiCallResponse result = ApiHelper.deserialize(responseBody,
                ApiCallResponse.class);

        return new ApiResponse<ApiCallResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Returns near-realtime metadata about the specified call.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @return    Returns the ApiCallStateResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ApiCallStateResponse> getCallState(
            final String accountId,
            final String callId) throws ApiException, IOException {
        HttpRequest request = buildGetCallStateRequest(accountId, callId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetCallStateResponse(context);
    }

    /**
     * Returns near-realtime metadata about the specified call.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @return    Returns the ApiCallStateResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ApiCallStateResponse>> getCallStateAsync(
            final String accountId,
            final String callId) {
        return makeHttpCallAsync(() -> buildGetCallStateRequest(accountId, callId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetCallStateResponse(context));
    }

    /**
     * Builds the HttpRequest object for getCallState.
     */
    private HttpRequest buildGetCallStateRequest(
            final String accountId,
            final String callId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getCallState.
     * @return An object of type ApiCallStateResponse
     */
    private ApiResponse<ApiCallStateResponse> handleGetCallStateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ApiCallStateResponse result = ApiHelper.deserialize(responseBody,
                ApiCallStateResponse.class);

        return new ApiResponse<ApiCallStateResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Interrupts and replaces an active call's BXML document.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> modifyCall(
            final String accountId,
            final String callId,
            final ApiModifyCallRequest body) throws ApiException, IOException {
        HttpRequest request = buildModifyCallRequest(accountId, callId, body);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleModifyCallResponse(context);
    }

    /**
     * Interrupts and replaces an active call's BXML document.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> modifyCallAsync(
            final String accountId,
            final String callId,
            final ApiModifyCallRequest body) {
        return makeHttpCallAsync(() -> buildModifyCallRequest(accountId, callId, body),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleModifyCallResponse(context));
    }

    /**
     * Builds the HttpRequest object for modifyCall.
     */
    private HttpRequest buildModifyCallRequest(
            final String accountId,
            final String callId,
            final ApiModifyCallRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for modifyCall.
     * @return An object of type void
     */
    private ApiResponse<Void> handleModifyCallResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Pauses or resumes a recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> modifyCallRecordingState(
            final String accountId,
            final String callId,
            final ModifyCallRecordingState body) throws ApiException, IOException {
        HttpRequest request = buildModifyCallRecordingStateRequest(accountId, callId, body);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleModifyCallRecordingStateResponse(context);
    }

    /**
     * Pauses or resumes a recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> modifyCallRecordingStateAsync(
            final String accountId,
            final String callId,
            final ModifyCallRecordingState body) {
        return makeHttpCallAsync(() -> buildModifyCallRecordingStateRequest(accountId, callId,
                body),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleModifyCallRecordingStateResponse(context));
    }

    /**
     * Builds the HttpRequest object for modifyCallRecordingState.
     */
    private HttpRequest buildModifyCallRecordingStateRequest(
            final String accountId,
            final String callId,
            final ModifyCallRecordingState body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recording");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for modifyCallRecordingState.
     * @return An object of type void
     */
    private ApiResponse<Void> handleModifyCallRecordingStateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified call.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @return    Returns the List of RecordingMetadataResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<RecordingMetadataResponse>> getQueryMetadataForAccountAndCall(
            final String accountId,
            final String callId) throws ApiException, IOException {
        HttpRequest request = buildGetQueryMetadataForAccountAndCallRequest(accountId, callId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetQueryMetadataForAccountAndCallResponse(context);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified call.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @return    Returns the List of RecordingMetadataResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<RecordingMetadataResponse>>> getQueryMetadataForAccountAndCallAsync(
            final String accountId,
            final String callId) {
        return makeHttpCallAsync(() -> buildGetQueryMetadataForAccountAndCallRequest(accountId,
                callId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetQueryMetadataForAccountAndCallResponse(context));
    }

    /**
     * Builds the HttpRequest object for getQueryMetadataForAccountAndCall.
     */
    private HttpRequest buildGetQueryMetadataForAccountAndCallRequest(
            final String accountId,
            final String callId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getQueryMetadataForAccountAndCall.
     * @return An object of type List of RecordingMetadataResponse
     */
    private ApiResponse<List<RecordingMetadataResponse>> handleGetQueryMetadataForAccountAndCallResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<RecordingMetadataResponse> result = ApiHelper.deserializeArray(responseBody,
                RecordingMetadataResponse[].class);
        return new ApiResponse<List<RecordingMetadataResponse>>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Returns metadata for the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the RecordingMetadataResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RecordingMetadataResponse> getMetadataForRecording(
            final String accountId,
            final String callId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildGetMetadataForRecordingRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetMetadataForRecordingResponse(context);
    }

    /**
     * Returns metadata for the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the RecordingMetadataResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RecordingMetadataResponse>> getMetadataForRecordingAsync(
            final String accountId,
            final String callId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildGetMetadataForRecordingRequest(accountId, callId,
                recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetMetadataForRecordingResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMetadataForRecording.
     */
    private HttpRequest buildGetMetadataForRecordingRequest(
            final String accountId,
            final String callId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getMetadataForRecording.
     * @return An object of type RecordingMetadataResponse
     */
    private ApiResponse<RecordingMetadataResponse> handleGetMetadataForRecordingResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        RecordingMetadataResponse result = ApiHelper.deserialize(responseBody,
                RecordingMetadataResponse.class);

        return new ApiResponse<RecordingMetadataResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Deletes the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> deleteRecording(
            final String accountId,
            final String callId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildDeleteRecordingRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteRecordingResponse(context);
    }

    /**
     * Deletes the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> deleteRecordingAsync(
            final String accountId,
            final String callId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildDeleteRecordingRequest(accountId, callId, recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleDeleteRecordingResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteRecording.
     */
    private HttpRequest buildDeleteRecordingRequest(
            final String accountId,
            final String callId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteRecording.
     * @return An object of type void
     */
    private ApiResponse<Void> handleDeleteRecordingResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Downloads the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the InputStream wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<InputStream> getStreamRecordingMedia(
            final String accountId,
            final String callId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildGetStreamRecordingMediaRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsBinary(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetStreamRecordingMediaResponse(context);
    }

    /**
     * Downloads the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the InputStream wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<InputStream>> getStreamRecordingMediaAsync(
            final String accountId,
            final String callId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildGetStreamRecordingMediaRequest(accountId, callId,
                recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetStreamRecordingMediaResponse(context));
    }

    /**
     * Builds the HttpRequest object for getStreamRecordingMedia.
     */
    private HttpRequest buildGetStreamRecordingMediaRequest(
            final String accountId,
            final String callId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getStreamRecordingMedia.
     * @return An object of type InputStream
     */
    private ApiResponse<InputStream> handleGetStreamRecordingMediaResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        InputStream result = response.getRawBody();
        return new ApiResponse<InputStream>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Deletes the specified recording's media.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> deleteRecordingMedia(
            final String accountId,
            final String callId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildDeleteRecordingMediaRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteRecordingMediaResponse(context);
    }

    /**
     * Deletes the specified recording's media.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> deleteRecordingMediaAsync(
            final String accountId,
            final String callId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildDeleteRecordingMediaRequest(accountId, callId,
                recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleDeleteRecordingMediaResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteRecordingMedia.
     */
    private HttpRequest buildDeleteRecordingMediaRequest(
            final String accountId,
            final String callId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteRecordingMedia.
     * @return An object of type void
     */
    private ApiResponse<Void> handleDeleteRecordingMediaResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Downloads the specified transcription.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the TranscriptionResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<TranscriptionResponse> getRecordingTranscription(
            final String accountId,
            final String callId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildGetRecordingTranscriptionRequest(accountId, callId, recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetRecordingTranscriptionResponse(context);
    }

    /**
     * Downloads the specified transcription.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the TranscriptionResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<TranscriptionResponse>> getRecordingTranscriptionAsync(
            final String accountId,
            final String callId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildGetRecordingTranscriptionRequest(accountId, callId,
                recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetRecordingTranscriptionResponse(context));
    }

    /**
     * Builds the HttpRequest object for getRecordingTranscription.
     */
    private HttpRequest buildGetRecordingTranscriptionRequest(
            final String accountId,
            final String callId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getRecordingTranscription.
     * @return An object of type TranscriptionResponse
     */
    private ApiResponse<TranscriptionResponse> handleGetRecordingTranscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TranscriptionResponse result = ApiHelper.deserialize(responseBody,
                TranscriptionResponse.class);

        return new ApiResponse<TranscriptionResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Requests that the specified recording be transcribed.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> createTranscribeRecording(
            final String accountId,
            final String callId,
            final String recordingId,
            final ApiTranscribeRecordingRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateTranscribeRecordingRequest(accountId, callId, recordingId,
                body);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleCreateTranscribeRecordingResponse(context);
    }

    /**
     * Requests that the specified recording be transcribed.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> createTranscribeRecordingAsync(
            final String accountId,
            final String callId,
            final String recordingId,
            final ApiTranscribeRecordingRequest body) {
        return makeHttpCallAsync(() -> buildCreateTranscribeRecordingRequest(accountId, callId,
                recordingId, body),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleCreateTranscribeRecordingResponse(context));
    }

    /**
     * Builds the HttpRequest object for createTranscribeRecording.
     */
    private HttpRequest buildCreateTranscribeRecordingRequest(
            final String accountId,
            final String callId,
            final String recordingId,
            final ApiTranscribeRecordingRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createTranscribeRecording.
     * @return An object of type void
     */
    private ApiResponse<Void> handleCreateTranscribeRecordingResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 410) {
            throw new ApiErrorResponseException("The media for this recording has been deleted, so we can't transcribe it", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Deletes the specified recording's transcription.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> deleteRecordingTranscription(
            final String accountId,
            final String callId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildDeleteRecordingTranscriptionRequest(accountId, callId,
                recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteRecordingTranscriptionResponse(context);
    }

    /**
     * Deletes the specified recording's transcription.
     * @param  accountId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> deleteRecordingTranscriptionAsync(
            final String accountId,
            final String callId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildDeleteRecordingTranscriptionRequest(accountId, callId,
                recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleDeleteRecordingTranscriptionResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteRecordingTranscription.
     */
    private HttpRequest buildDeleteRecordingTranscriptionRequest(
            final String accountId,
            final String callId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteRecordingTranscription.
     * @return An object of type void
     */
    private ApiResponse<Void> handleDeleteRecordingTranscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Returns information about the conferences in the account.
     * @param  accountId  Required parameter: Example:
     * @param  pageSize  Optional parameter: Example: 1000
     * @param  pageToken  Optional parameter: Example:
     * @param  name  Optional parameter: Example:
     * @param  minCreatedTime  Optional parameter: Example:
     * @param  maxCreatedTime  Optional parameter: Example:
     * @return    Returns the List of ConferenceDetail wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<ConferenceDetail>> getConferencesByAccount(
            final String accountId,
            final Integer pageSize,
            final String pageToken,
            final String name,
            final String minCreatedTime,
            final String maxCreatedTime) throws ApiException, IOException {
        HttpRequest request = buildGetConferencesByAccountRequest(accountId, pageSize, pageToken,
                name, minCreatedTime, maxCreatedTime);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetConferencesByAccountResponse(context);
    }

    /**
     * Returns information about the conferences in the account.
     * @param  accountId  Required parameter: Example:
     * @param  pageSize  Optional parameter: Example: 1000
     * @param  pageToken  Optional parameter: Example:
     * @param  name  Optional parameter: Example:
     * @param  minCreatedTime  Optional parameter: Example:
     * @param  maxCreatedTime  Optional parameter: Example:
     * @return    Returns the List of ConferenceDetail wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<ConferenceDetail>>> getConferencesByAccountAsync(
            final String accountId,
            final Integer pageSize,
            final String pageToken,
            final String name,
            final String minCreatedTime,
            final String maxCreatedTime) {
        return makeHttpCallAsync(() -> buildGetConferencesByAccountRequest(accountId, pageSize,
                pageToken, name, minCreatedTime, maxCreatedTime),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetConferencesByAccountResponse(context));
    }

    /**
     * Builds the HttpRequest object for getConferencesByAccount.
     */
    private HttpRequest buildGetConferencesByAccountRequest(
            final String accountId,
            final Integer pageSize,
            final String pageToken,
            final String name,
            final String minCreatedTime,
            final String maxCreatedTime) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 1000);
        queryParameters.put("pageToken", pageToken);
        queryParameters.put("name", name);
        queryParameters.put("minCreatedTime", minCreatedTime);
        queryParameters.put("maxCreatedTime", maxCreatedTime);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getConferencesByAccount.
     * @return An object of type List of ConferenceDetail
     */
    private ApiResponse<List<ConferenceDetail>> handleGetConferencesByAccountResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<ConferenceDetail> result = ApiHelper.deserializeArray(responseBody,
                ConferenceDetail[].class);
        return new ApiResponse<List<ConferenceDetail>>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Returns information about the specified conference.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @return    Returns the ConferenceDetail wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ConferenceDetail> getConferenceById(
            final String accountId,
            final String conferenceId) throws ApiException, IOException {
        HttpRequest request = buildGetConferenceByIdRequest(accountId, conferenceId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetConferenceByIdResponse(context);
    }

    /**
     * Returns information about the specified conference.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @return    Returns the ConferenceDetail wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ConferenceDetail>> getConferenceByIdAsync(
            final String accountId,
            final String conferenceId) {
        return makeHttpCallAsync(() -> buildGetConferenceByIdRequest(accountId, conferenceId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetConferenceByIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for getConferenceById.
     */
    private HttpRequest buildGetConferenceByIdRequest(
            final String accountId,
            final String conferenceId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getConferenceById.
     * @return An object of type ConferenceDetail
     */
    private ApiResponse<ConferenceDetail> handleGetConferenceByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ConferenceDetail result = ApiHelper.deserialize(responseBody,
                ConferenceDetail.class);

        return new ApiResponse<ConferenceDetail>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Modify the conference state.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> modifyConference(
            final String accountId,
            final String conferenceId,
            final ApiModifyConferenceRequest body) throws ApiException, IOException {
        HttpRequest request = buildModifyConferenceRequest(accountId, conferenceId, body);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleModifyConferenceResponse(context);
    }

    /**
     * Modify the conference state.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> modifyConferenceAsync(
            final String accountId,
            final String conferenceId,
            final ApiModifyConferenceRequest body) {
        return makeHttpCallAsync(() -> buildModifyConferenceRequest(accountId, conferenceId, body),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleModifyConferenceResponse(context));
    }

    /**
     * Builds the HttpRequest object for modifyConference.
     */
    private HttpRequest buildModifyConferenceRequest(
            final String accountId,
            final String conferenceId,
            final ApiModifyConferenceRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for modifyConference.
     * @return An object of type void
     */
    private ApiResponse<Void> handleModifyConferenceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Updates settings for a particular conference member.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> modifyConferenceMember(
            final String accountId,
            final String conferenceId,
            final String callId,
            final ConferenceMemberDetail body) throws ApiException, IOException {
        HttpRequest request = buildModifyConferenceMemberRequest(accountId, conferenceId, callId,
                body);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleModifyConferenceMemberResponse(context);
    }

    /**
     * Updates settings for a particular conference member.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  callId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> modifyConferenceMemberAsync(
            final String accountId,
            final String conferenceId,
            final String callId,
            final ConferenceMemberDetail body) {
        return makeHttpCallAsync(() -> buildModifyConferenceMemberRequest(accountId, conferenceId,
                callId, body),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleModifyConferenceMemberResponse(context));
    }

    /**
     * Builds the HttpRequest object for modifyConferenceMember.
     */
    private HttpRequest buildModifyConferenceMemberRequest(
            final String accountId,
            final String conferenceId,
            final String callId,
            final ConferenceMemberDetail body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        templateParameters.put("callId",
                new SimpleEntry<Object, Boolean>(callId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for modifyConferenceMember.
     * @return An object of type void
     */
    private ApiResponse<Void> handleModifyConferenceMemberResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return new ApiResponse<Void>(response.getStatusCode(), response.getHeaders(), null);
    }

    /**
     * Returns information about the specified conference member.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  memberId  Required parameter: Example:
     * @return    Returns the ConferenceMemberDetail wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ConferenceMemberDetail> getConferenceMember(
            final String accountId,
            final String conferenceId,
            final String memberId) throws ApiException, IOException {
        HttpRequest request = buildGetConferenceMemberRequest(accountId, conferenceId, memberId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetConferenceMemberResponse(context);
    }

    /**
     * Returns information about the specified conference member.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  memberId  Required parameter: Example:
     * @return    Returns the ConferenceMemberDetail wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ConferenceMemberDetail>> getConferenceMemberAsync(
            final String accountId,
            final String conferenceId,
            final String memberId) {
        return makeHttpCallAsync(() -> buildGetConferenceMemberRequest(accountId, conferenceId,
                memberId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetConferenceMemberResponse(context));
    }

    /**
     * Builds the HttpRequest object for getConferenceMember.
     */
    private HttpRequest buildGetConferenceMemberRequest(
            final String accountId,
            final String conferenceId,
            final String memberId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        templateParameters.put("memberId",
                new SimpleEntry<Object, Boolean>(memberId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getConferenceMember.
     * @return An object of type ConferenceMemberDetail
     */
    private ApiResponse<ConferenceMemberDetail> handleGetConferenceMemberResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ConferenceMemberDetail result = ApiHelper.deserialize(responseBody,
                ConferenceMemberDetail.class);

        return new ApiResponse<ConferenceMemberDetail>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified conference.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @return    Returns the List of ConferenceRecordingMetadataResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<ConferenceRecordingMetadataResponse>> getQueryMetadataForAccountAndConference(
            final String accountId,
            final String conferenceId) throws ApiException, IOException {
        HttpRequest request = buildGetQueryMetadataForAccountAndConferenceRequest(accountId,
                conferenceId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetQueryMetadataForAccountAndConferenceResponse(context);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified conference.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @return    Returns the List of ConferenceRecordingMetadataResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<ConferenceRecordingMetadataResponse>>> getQueryMetadataForAccountAndConferenceAsync(
            final String accountId,
            final String conferenceId) {
        return makeHttpCallAsync(() -> buildGetQueryMetadataForAccountAndConferenceRequest(
                accountId, conferenceId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetQueryMetadataForAccountAndConferenceResponse(context));
    }

    /**
     * Builds the HttpRequest object for getQueryMetadataForAccountAndConference.
     */
    private HttpRequest buildGetQueryMetadataForAccountAndConferenceRequest(
            final String accountId,
            final String conferenceId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getQueryMetadataForAccountAndConference.
     * @return An object of type List of ConferenceRecordingMetadataResponse
     */
    private ApiResponse<List<ConferenceRecordingMetadataResponse>> handleGetQueryMetadataForAccountAndConferenceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<ConferenceRecordingMetadataResponse> result = ApiHelper.deserializeArray(responseBody,
                ConferenceRecordingMetadataResponse[].class);
        return new ApiResponse<List<ConferenceRecordingMetadataResponse>>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Returns metadata for the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the RecordingMetadataResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RecordingMetadataResponse> getMetadataForConferenceRecording(
            final String accountId,
            final String conferenceId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildGetMetadataForConferenceRecordingRequest(accountId, conferenceId,
                recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetMetadataForConferenceRecordingResponse(context);
    }

    /**
     * Returns metadata for the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the RecordingMetadataResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RecordingMetadataResponse>> getMetadataForConferenceRecordingAsync(
            final String accountId,
            final String conferenceId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildGetMetadataForConferenceRecordingRequest(accountId,
                conferenceId, recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetMetadataForConferenceRecordingResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMetadataForConferenceRecording.
     */
    private HttpRequest buildGetMetadataForConferenceRecordingRequest(
            final String accountId,
            final String conferenceId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getMetadataForConferenceRecording.
     * @return An object of type RecordingMetadataResponse
     */
    private ApiResponse<RecordingMetadataResponse> handleGetMetadataForConferenceRecordingResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        RecordingMetadataResponse result = ApiHelper.deserialize(responseBody,
                RecordingMetadataResponse.class);

        return new ApiResponse<RecordingMetadataResponse>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Downloads the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the InputStream wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<InputStream> getStreamConferenceRecordingMedia(
            final String accountId,
            final String conferenceId,
            final String recordingId) throws ApiException, IOException {
        HttpRequest request = buildGetStreamConferenceRecordingMediaRequest(accountId, conferenceId,
                recordingId);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsBinary(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetStreamConferenceRecordingMediaResponse(context);
    }

    /**
     * Downloads the specified recording.
     * @param  accountId  Required parameter: Example:
     * @param  conferenceId  Required parameter: Example:
     * @param  recordingId  Required parameter: Example:
     * @return    Returns the InputStream wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<InputStream>> getStreamConferenceRecordingMediaAsync(
            final String accountId,
            final String conferenceId,
            final String recordingId) {
        return makeHttpCallAsync(() -> buildGetStreamConferenceRecordingMediaRequest(accountId,
                conferenceId, recordingId),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetStreamConferenceRecordingMediaResponse(context));
    }

    /**
     * Builds the HttpRequest object for getStreamConferenceRecordingMedia.
     */
    private HttpRequest buildGetStreamConferenceRecordingMediaRequest(
            final String accountId,
            final String conferenceId,
            final String recordingId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        templateParameters.put("conferenceId",
                new SimpleEntry<Object, Boolean>(conferenceId, false));
        templateParameters.put("recordingId",
                new SimpleEntry<Object, Boolean>(recordingId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getStreamConferenceRecordingMedia.
     * @return An object of type InputStream
     */
    private ApiResponse<InputStream> handleGetStreamConferenceRecordingMediaResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        InputStream result = response.getRawBody();
        return new ApiResponse<InputStream>(response.getStatusCode(), response.getHeaders(), result);
    }

    /**
     * Returns a list of metadata for the recordings associated with the specified account. The list
     * can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list
     * is capped at 1000 entries and may be empty if no recordings match the specified criteria.
     * @param  accountId  Required parameter: Example:
     * @param  from  Optional parameter: Example:
     * @param  to  Optional parameter: Example:
     * @param  minStartTime  Optional parameter: Example:
     * @param  maxStartTime  Optional parameter: Example:
     * @return    Returns the List of RecordingMetadataResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<RecordingMetadataResponse>> getQueryMetadataForAccount(
            final String accountId,
            final String from,
            final String to,
            final String minStartTime,
            final String maxStartTime) throws ApiException, IOException {
        HttpRequest request = buildGetQueryMetadataForAccountRequest(accountId, from, to,
                minStartTime, maxStartTime);
        authManagers.get("voice").apply(request);

        HttpResponse response = getClientInstance().executeAsString(request);
        HttpContext context = new HttpContext(request, response);

        return handleGetQueryMetadataForAccountResponse(context);
    }

    /**
     * Returns a list of metadata for the recordings associated with the specified account. The list
     * can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list
     * is capped at 1000 entries and may be empty if no recordings match the specified criteria.
     * @param  accountId  Required parameter: Example:
     * @param  from  Optional parameter: Example:
     * @param  to  Optional parameter: Example:
     * @param  minStartTime  Optional parameter: Example:
     * @param  maxStartTime  Optional parameter: Example:
     * @return    Returns the List of RecordingMetadataResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<RecordingMetadataResponse>>> getQueryMetadataForAccountAsync(
            final String accountId,
            final String from,
            final String to,
            final String minStartTime,
            final String maxStartTime) {
        return makeHttpCallAsync(() -> buildGetQueryMetadataForAccountRequest(accountId, from, to,
                minStartTime, maxStartTime),
            req -> authManagers.get("voice").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsStringAsync(request)),
            context -> handleGetQueryMetadataForAccountResponse(context));
    }

    /**
     * Builds the HttpRequest object for getQueryMetadataForAccount.
     */
    private HttpRequest buildGetQueryMetadataForAccountRequest(
            final String accountId,
            final String from,
            final String to,
            final String minStartTime,
            final String maxStartTime) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.VOICEDEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/v2/accounts/{accountId}/recordings");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("accountId",
                new SimpleEntry<Object, Boolean>(accountId, false));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("from", from);
        queryParameters.put("to", to);
        queryParameters.put("minStartTime", minStartTime);
        queryParameters.put("maxStartTime", maxStartTime);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getQueryMetadataForAccount.
     * @return An object of type List of RecordingMetadataResponse
     */
    private ApiResponse<List<RecordingMetadataResponse>> handleGetQueryMetadataForAccountResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiErrorResponseException("Something's not quite right... Your request is invalid. Please fix it before trying again.", context);
        }
        if (responseCode == 401) {
            throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", context);
        }
        if (responseCode == 403) {
            throw new ApiErrorResponseException("User unauthorized to perform this action.", context);
        }
        if (responseCode == 404) {
            throw new ApiErrorResponseException("The resource specified cannot be found or does not belong to you.", context);
        }
        if (responseCode == 415) {
            throw new ApiErrorResponseException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", context);
        }
        if (responseCode == 429) {
            throw new ApiErrorResponseException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", context);
        }
        if (responseCode == 500) {
            throw new ApiErrorResponseException("Something unexpected happened. Please try again.", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<RecordingMetadataResponse> result = ApiHelper.deserializeArray(responseBody,
                RecordingMetadataResponse[].class);
        return new ApiResponse<List<RecordingMetadataResponse>>(response.getStatusCode(), response.getHeaders(), result);
    }

}