/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.bandwidth.voice.models;

import com.bandwidth.internal.OptionalNullable;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.List;

/**
 * This is a model class for ConferenceMemberState type.
 */
public class ConferenceMemberState {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String callId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String conferenceId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String memberUrl;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean mute;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean hold;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<List<String>> callIdsToCoach;

    /**
     * Default constructor.
     */
    public ConferenceMemberState() {
    }

    /**
     * Initialization constructor.
     * @param  callId  String value for callId.
     * @param  conferenceId  String value for conferenceId.
     * @param  memberUrl  String value for memberUrl.
     * @param  mute  Boolean value for mute.
     * @param  hold  Boolean value for hold.
     * @param  callIdsToCoach  List of String value for callIdsToCoach.
     */
    public ConferenceMemberState(
            String callId,
            String conferenceId,
            String memberUrl,
            Boolean mute,
            Boolean hold,
            List<String> callIdsToCoach) {
        this.callId = callId;
        this.conferenceId = conferenceId;
        this.memberUrl = memberUrl;
        this.mute = mute;
        this.hold = hold;
        this.callIdsToCoach = OptionalNullable.of(callIdsToCoach);
    }

    /**
     * Internal initialization constructor.
     */
    protected ConferenceMemberState(String callId, String conferenceId, String memberUrl,
            Boolean mute, Boolean hold, OptionalNullable<List<String>> callIdsToCoach) {
        this.callId = callId;
        this.conferenceId = conferenceId;
        this.memberUrl = memberUrl;
        this.mute = mute;
        this.hold = hold;
        this.callIdsToCoach = callIdsToCoach;
    }

    /**
     * Getter for CallId.
     * @return Returns the String
     */
    @JsonGetter("callId")
    public String getCallId() {
        return callId;
    }

    /**
     * Setter for CallId.
     * @param callId Value for String
     */
    @JsonSetter("callId")
    public void setCallId(String callId) {
        this.callId = callId;
    }

    /**
     * Getter for ConferenceId.
     * @return Returns the String
     */
    @JsonGetter("conferenceId")
    public String getConferenceId() {
        return conferenceId;
    }

    /**
     * Setter for ConferenceId.
     * @param conferenceId Value for String
     */
    @JsonSetter("conferenceId")
    public void setConferenceId(String conferenceId) {
        this.conferenceId = conferenceId;
    }

    /**
     * Getter for MemberUrl.
     * @return Returns the String
     */
    @JsonGetter("memberUrl")
    public String getMemberUrl() {
        return memberUrl;
    }

    /**
     * Setter for MemberUrl.
     * @param memberUrl Value for String
     */
    @JsonSetter("memberUrl")
    public void setMemberUrl(String memberUrl) {
        this.memberUrl = memberUrl;
    }

    /**
     * Getter for Mute.
     * @return Returns the Boolean
     */
    @JsonGetter("mute")
    public Boolean getMute() {
        return mute;
    }

    /**
     * Setter for Mute.
     * @param mute Value for Boolean
     */
    @JsonSetter("mute")
    public void setMute(Boolean mute) {
        this.mute = mute;
    }

    /**
     * Getter for Hold.
     * @return Returns the Boolean
     */
    @JsonGetter("hold")
    public Boolean getHold() {
        return hold;
    }

    /**
     * Setter for Hold.
     * @param hold Value for Boolean
     */
    @JsonSetter("hold")
    public void setHold(Boolean hold) {
        this.hold = hold;
    }

    /**
     * Internal Getter for CallIdsToCoach.
     * @return Returns the Internal List of String
     */
    @JsonGetter("callIdsToCoach")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetCallIdsToCoach() {
        return this.callIdsToCoach;
    }

    /**
     * Getter for CallIdsToCoach.
     * @return Returns the List of String
     */
    public List<String> getCallIdsToCoach() {
        return OptionalNullable.getFrom(callIdsToCoach);
    }

    /**
     * Setter for CallIdsToCoach.
     * @param callIdsToCoach Value for List of String
     */
    @JsonSetter("callIdsToCoach")
    public void setCallIdsToCoach(List<String> callIdsToCoach) {
        this.callIdsToCoach = OptionalNullable.of(callIdsToCoach);
    }

    /**
     * UnSetter for CallIdsToCoach.
     */
    public void unsetCallIdsToCoach() {
        callIdsToCoach = null;
    }

    /**
     * Converts this ConferenceMemberState into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ConferenceMemberState [" + "callId=" + callId + ", conferenceId=" + conferenceId
                + ", memberUrl=" + memberUrl + ", mute=" + mute + ", hold=" + hold
                + ", callIdsToCoach=" + callIdsToCoach + "]";
    }

    /**
     * Builds a new {@link ConferenceMemberState.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ConferenceMemberState.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .callId(getCallId())
                .conferenceId(getConferenceId())
                .memberUrl(getMemberUrl())
                .mute(getMute())
                .hold(getHold());
        builder.callIdsToCoach = internalGetCallIdsToCoach();
        return builder;
    }

    /**
     * Class to build instances of {@link ConferenceMemberState}.
     */
    public static class Builder {
        private String callId;
        private String conferenceId;
        private String memberUrl;
        private Boolean mute;
        private Boolean hold;
        private OptionalNullable<List<String>> callIdsToCoach;



        /**
         * Setter for callId.
         * @param  callId  String value for callId.
         * @return Builder
         */
        public Builder callId(String callId) {
            this.callId = callId;
            return this;
        }

        /**
         * Setter for conferenceId.
         * @param  conferenceId  String value for conferenceId.
         * @return Builder
         */
        public Builder conferenceId(String conferenceId) {
            this.conferenceId = conferenceId;
            return this;
        }

        /**
         * Setter for memberUrl.
         * @param  memberUrl  String value for memberUrl.
         * @return Builder
         */
        public Builder memberUrl(String memberUrl) {
            this.memberUrl = memberUrl;
            return this;
        }

        /**
         * Setter for mute.
         * @param  mute  Boolean value for mute.
         * @return Builder
         */
        public Builder mute(Boolean mute) {
            this.mute = mute;
            return this;
        }

        /**
         * Setter for hold.
         * @param  hold  Boolean value for hold.
         * @return Builder
         */
        public Builder hold(Boolean hold) {
            this.hold = hold;
            return this;
        }

        /**
         * Setter for callIdsToCoach.
         * @param  callIdsToCoach  List of String value for callIdsToCoach.
         * @return Builder
         */
        public Builder callIdsToCoach(List<String> callIdsToCoach) {
            this.callIdsToCoach = OptionalNullable.of(callIdsToCoach);
            return this;
        }

        /**
         * UnSetter for callIdsToCoach.
         * @return Builder
         */
        public Builder unsetCallIdsToCoach() {
            callIdsToCoach = null;
            return this;
        }

        /**
         * Builds a new {@link ConferenceMemberState} object using the set fields.
         * @return {@link ConferenceMemberState}
         */
        public ConferenceMemberState build() {
            return new ConferenceMemberState(callId, conferenceId, memberUrl, mute, hold,
                    callIdsToCoach);
        }
    }
}
