/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.bandwidth.voice.models;

import com.bandwidth.internal.OptionalNullable;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * This is a model class for TranscribeRecordingRequest type.
 */
public class TranscribeRecordingRequest {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String callbackUrl;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<CallbackMethodEnum> callbackMethod;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> username;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> password;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> tag;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Double> callbackTimeout;
    private OptionalNullable<Boolean> detectLanguage;

    /**
     * Default constructor.
     */
    public TranscribeRecordingRequest() {
    }

    /**
     * Initialization constructor.
     * 
     * @param callbackUrl     String value for callbackUrl.
     * @param callbackMethod  CallbackMethodEnum value for callbackMethod.
     * @param username        String value for username.
     * @param password        String value for password.
     * @param tag             String value for tag.
     * @param callbackTimeout Double value for callbackTimeout.
     * @param detectLanguage  Boolean value for detectLanguage
     */
    public TranscribeRecordingRequest(
            String callbackUrl,
            CallbackMethodEnum callbackMethod,
            String username,
            String password,
            String tag,
            Double callbackTimeout,
            Boolean detectLanguage) {
        this.callbackUrl = callbackUrl;
        this.callbackMethod = OptionalNullable.of(callbackMethod);
        this.username = OptionalNullable.of(username);
        this.password = OptionalNullable.of(password);
        this.tag = OptionalNullable.of(tag);
        this.callbackTimeout = OptionalNullable.of(callbackTimeout);
        this.detectLanguage = OptionalNullable.of(detectLanguage);
    }

    /**
     * Internal initialization constructor.
     */
    protected TranscribeRecordingRequest(String callbackUrl,
            OptionalNullable<CallbackMethodEnum> callbackMethod, OptionalNullable<String> username,
            OptionalNullable<String> password, OptionalNullable<String> tag,
            OptionalNullable<Double> callbackTimeout, OptionalNullable<Boolean> detectLanguage) {
        this.callbackUrl = callbackUrl;
        this.callbackMethod = callbackMethod;
        this.username = username;
        this.password = password;
        this.tag = tag;
        this.callbackTimeout = callbackTimeout;
        this.detectLanguage = detectLanguage;
    }

    /**
     * Getter for CallbackUrl.
     * 
     * @return Returns the String
     */
    @JsonGetter("callbackUrl")
    public String getCallbackUrl() {
        return callbackUrl;
    }

    /**
     * Setter for CallbackUrl.
     * 
     * @param callbackUrl Value for String
     */
    @JsonSetter("callbackUrl")
    public void setCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
    }

    /**
     * Internal Getter for CallbackMethod.
     * 
     * @return Returns the Internal CallbackMethodEnum
     */
    @JsonGetter("callbackMethod")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<CallbackMethodEnum> internalGetCallbackMethod() {
        return this.callbackMethod;
    }

    /**
     * Getter for CallbackMethod.
     * 
     * @return Returns the CallbackMethodEnum
     */
    public CallbackMethodEnum getCallbackMethod() {
        return OptionalNullable.getFrom(callbackMethod);
    }

    /**
     * Setter for CallbackMethod.
     * 
     * @param callbackMethod Value for CallbackMethodEnum
     */
    @JsonSetter("callbackMethod")
    public void setCallbackMethod(CallbackMethodEnum callbackMethod) {
        this.callbackMethod = OptionalNullable.of(callbackMethod);
    }

    /**
     * UnSetter for CallbackMethod.
     */
    public void unsetCallbackMethod() {
        callbackMethod = null;
    }

    /**
     * Internal Getter for Username.
     * 
     * @return Returns the Internal String
     */
    @JsonGetter("username")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUsername() {
        return this.username;
    }

    /**
     * Getter for Username.
     * 
     * @return Returns the String
     */
    public String getUsername() {
        return OptionalNullable.getFrom(username);
    }

    /**
     * Setter for Username.
     * 
     * @param username Value for String
     */
    @JsonSetter("username")
    public void setUsername(String username) {
        this.username = OptionalNullable.of(username);
    }

    /**
     * UnSetter for Username.
     */
    public void unsetUsername() {
        username = null;
    }

    /**
     * Internal Getter for Password.
     * 
     * @return Returns the Internal String
     */
    @JsonGetter("password")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPassword() {
        return this.password;
    }

    /**
     * Getter for Password.
     * 
     * @return Returns the String
     */
    public String getPassword() {
        return OptionalNullable.getFrom(password);
    }

    /**
     * Setter for Password.
     * 
     * @param password Value for String
     */
    @JsonSetter("password")
    public void setPassword(String password) {
        this.password = OptionalNullable.of(password);
    }

    /**
     * UnSetter for Password.
     */
    public void unsetPassword() {
        password = null;
    }

    /**
     * Internal Getter for Tag.
     * 
     * @return Returns the Internal String
     */
    @JsonGetter("tag")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTag() {
        return this.tag;
    }

    /**
     * Getter for Tag.
     * 
     * @return Returns the String
     */
    public String getTag() {
        return OptionalNullable.getFrom(tag);
    }

    /**
     * Setter for Tag.
     * 
     * @param tag Value for String
     */
    @JsonSetter("tag")
    public void setTag(String tag) {
        this.tag = OptionalNullable.of(tag);
    }

    /**
     * UnSetter for Tag.
     */
    public void unsetTag() {
        tag = null;
    }

    /**
     * Internal Getter for CallbackTimeout.
     * 
     * @return Returns the Internal Double
     */
    @JsonGetter("callbackTimeout")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCallbackTimeout() {
        return this.callbackTimeout;
    }

    /**
     * Getter for CallbackTimeout.
     * 
     * @return Returns the Double
     */
    public Double getCallbackTimeout() {
        return OptionalNullable.getFrom(callbackTimeout);
    }

    /**
     * Setter for CallbackTimeout.
     * 
     * @param callbackTimeout Value for Double
     */
    @JsonSetter("callbackTimeout")
    public void setCallbackTimeout(Double callbackTimeout) {
        this.callbackTimeout = OptionalNullable.of(callbackTimeout);
    }

    /**
     * UnSetter for CallbackTimeout.
     */
    public void unsetCallbackTimeout() {
        callbackTimeout = null;
    }

    /**
     * Internal Getter for DetectLanguage.
     * 
     * @return Returns the Internal Boolean
     */
    @JsonGetter("detectLanguage")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetDetectLanguage() {
        return this.detectLanguage;
    }

    /**
     * Getter for DetectLanguage.
     * 
     * @return Returns the Boolean
     */
    public Boolean getDetectLanguage() {
        return OptionalNullable.getFrom(detectLanguage);
    }

    /**
     * Setter for DetectLanguage.
     * 
     * @param detectLanguage Value for Boolean
     */
    @JsonSetter("detectLanguage")
    public void setDetectLanguage(Boolean detectLanguage) {
        this.detectLanguage = OptionalNullable.of(detectLanguage);
    }

    /**
     * UnSetter for DetectLanguage.
     */
    public void unsetDetectLanguage() {
        detectLanguage = null;
    }

    /**
     * Converts this TranscribeRecordingRequest into string format.
     * 
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TranscribeRecordingRequest [" + "callbackUrl=" + callbackUrl + ", callbackMethod="
                + callbackMethod + ", username=" + username + ", password=" + password + ", tag="
                + tag + ", callbackTimeout=" + callbackTimeout + ", detectLanguage=" + detectLanguage + "]";
    }

    /**
     * Builds a new {@link TranscribeRecordingRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * 
     * @return a new {@link TranscribeRecordingRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .callbackUrl(getCallbackUrl());
        builder.callbackMethod = internalGetCallbackMethod();
        builder.username = internalGetUsername();
        builder.password = internalGetPassword();
        builder.tag = internalGetTag();
        builder.callbackTimeout = internalGetCallbackTimeout();
        builder.detectLanguage = internalGetDetectLanguage();
        return builder;
    }

    /**
     * Class to build instances of {@link TranscribeRecordingRequest}.
     */
    public static class Builder {
        private String callbackUrl;
        private OptionalNullable<CallbackMethodEnum> callbackMethod;
        private OptionalNullable<String> username;
        private OptionalNullable<String> password;
        private OptionalNullable<String> tag;
        private OptionalNullable<Double> callbackTimeout;
        private OptionalNullable<Boolean> detectLanguage;

        /**
         * Setter for callbackUrl.
         * 
         * @param callbackUrl String value for callbackUrl.
         * @return Builder
         */
        public Builder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * Setter for callbackMethod.
         * 
         * @param callbackMethod CallbackMethodEnum value for callbackMethod.
         * @return Builder
         */
        public Builder callbackMethod(CallbackMethodEnum callbackMethod) {
            this.callbackMethod = OptionalNullable.of(callbackMethod);
            return this;
        }

        /**
         * UnSetter for callbackMethod.
         * 
         * @return Builder
         */
        public Builder unsetCallbackMethod() {
            callbackMethod = null;
            return this;
        }

        /**
         * Setter for username.
         * 
         * @param username String value for username.
         * @return Builder
         */
        public Builder username(String username) {
            this.username = OptionalNullable.of(username);
            return this;
        }

        /**
         * UnSetter for username.
         * 
         * @return Builder
         */
        public Builder unsetUsername() {
            username = null;
            return this;
        }

        /**
         * Setter for password.
         * 
         * @param password String value for password.
         * @return Builder
         */
        public Builder password(String password) {
            this.password = OptionalNullable.of(password);
            return this;
        }

        /**
         * UnSetter for password.
         * 
         * @return Builder
         */
        public Builder unsetPassword() {
            password = null;
            return this;
        }

        /**
         * Setter for tag.
         * 
         * @param tag String value for tag.
         * @return Builder
         */
        public Builder tag(String tag) {
            this.tag = OptionalNullable.of(tag);
            return this;
        }

        /**
         * UnSetter for tag.
         * 
         * @return Builder
         */
        public Builder unsetTag() {
            tag = null;
            return this;
        }

        /**
         * Setter for callbackTimeout.
         * 
         * @param callbackTimeout Double value for callbackTimeout.
         * @return Builder
         */
        public Builder callbackTimeout(Double callbackTimeout) {
            this.callbackTimeout = OptionalNullable.of(callbackTimeout);
            return this;
        }

        /**
         * UnSetter for callbackTimeout.
         * 
         * @return Builder
         */
        public Builder unsetCallbackTimeout() {
            callbackTimeout = null;
            return this;
        }

        /**
         * Setter for detectLanguage.
         * 
         * @param detectLanguage Boolean value for detectLanguage.
         * @return Builder
         */
        public Builder detectLanguage(Boolean detectLanguage) {
            this.detectLanguage = OptionalNullable.of(detectLanguage);
            return this;
        }

        /**
         * UnSetter for detectLanguage.
         * 
         * @return Builder
         */
        public Builder unsetDetectLanguage() {
            detectLanguage = null;
            return this;
        }

        /**
         * Builds a new {@link TranscribeRecordingRequest} object using the set fields.
         * 
         * @return {@link TranscribeRecordingRequest}
         */
        public TranscribeRecordingRequest build() {
            return new TranscribeRecordingRequest(callbackUrl, callbackMethod, username, password,
                    tag, callbackTimeout, detectLanguage);
        }
    }
}
