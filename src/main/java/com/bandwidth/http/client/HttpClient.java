/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.bandwidth.http.client;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import com.bandwidth.http.Headers;
import com.bandwidth.http.request.HttpBodyRequest;
import com.bandwidth.http.request.HttpRequest;
import com.bandwidth.http.response.HttpResponse;


/**
 * HTTP Client to send HTTP Requests and read the responses.
 */
public interface HttpClient {

    /**
     * Execute a given HttpRequest to get string response back
     * @param   request     The given HttpRequest to execute
     * @return  CompletableFuture<HttpResponse> after execution
     */
    public CompletableFuture<HttpResponse> executeAsStringAsync(final HttpRequest request);

    /**
     * Execute a given HttpRequest to get binary response back
     * @param   request     The given HttpRequest to execute
     * @return   CompletableFuture<HttpResponse> after execution
     */
    public CompletableFuture<HttpResponse> executeAsBinaryAsync(final HttpRequest request);

    /**
     * Execute a given HttpRequest to get binary response back
     * @param   request     The given HttpRequest to execute     
     */
    public HttpResponse executeAsBinary(final HttpRequest request) throws IOException;

    /**
     * Execute a given HttpRequest to get string response back
     * @param   request     The given HttpRequest to execute     
     */
    public HttpResponse executeAsString(final HttpRequest request) throws IOException;


    /**
     * Create a simple HTTP GET request
     */
    public HttpRequest get(StringBuilder queryUrlBuilder, Headers headers,
            Map<String, Object> queryParams, List<SimpleEntry<String, Object>> parameters);

    /**
    * Create a simple HTTP HEAD request
    */
    public HttpRequest head(StringBuilder queryUrlBuilder, Headers headers,
            Map<String, Object> queryParams, List<SimpleEntry<String, Object>> parameters);

    /**
     * Create an HTTP POST request with parameters
     */
    public HttpRequest post(StringBuilder queryUrlBuilder, Headers headers,
            Map<String, Object> queryParams, List<SimpleEntry<String, Object>> parameters);

    /**
     * Create an HTTP POST request with body
     */
    public HttpBodyRequest postBody(StringBuilder queryUrlBuilder,
            Headers headers, Map<String, Object> queryParams, Object body);

    /**
     * Create an HTTP PUT request with parameters
     */
    public HttpRequest put(StringBuilder queryUrlBuilder, Headers headers,
            Map<String, Object> queryParams, List<SimpleEntry<String, Object>> parameters);

    /**
     * Create an HTTP PUT request with body
     */
    HttpBodyRequest putBody(StringBuilder queryUrlBuilder,
            Headers headers, Map<String, Object> queryParams, Object body);

    /**
     * Create an HTTP PATCH request with parameters
     */
    public HttpRequest patch(StringBuilder queryUrlBuilder, Headers headers,
            Map<String, Object> queryParams, List<SimpleEntry<String, Object>> parameters);

    /**
     * Create an HTTP PATCH request with body
     */
    public HttpBodyRequest patchBody(StringBuilder queryUrlBuilder,
            Headers headers, Map<String, Object> queryParams, Object body);

    /**
     * Create an HTTP DELETE request with parameters
     */
    HttpRequest delete(StringBuilder queryUrlBuilder, Headers headers,
            Map<String, Object> queryParams, List<SimpleEntry<String, Object>> parameters);

    /**
     * Create an HTTP DELETE request with body
     */
    public HttpBodyRequest deleteBody(StringBuilder queryUrlBuilder,
            Headers headers, Map<String, Object> queryParams, Object body);
}