/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bandwidth.sdk.unit.models;

import org.junit.jupiter.api.Test;

import java.net.URI;
import java.util.Arrays;
import java.util.ArrayList;
import java.time.OffsetDateTime;
import com.bandwidth.sdk.model.Conference;
import com.bandwidth.sdk.model.ConferenceMember;
import com.bandwidth.sdk.model.CallbackMethodEnum;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;

/**
 * Model tests for Conference
 */
public class ConferenceTest {
    private final Conference model = new Conference()
            .id("id")
            .name("name")
            .createdTime(OffsetDateTime.now())
            .completedTime(OffsetDateTime.now())
            .conferenceEventUrl(URI.create("http://example.com"))
            .conferenceEventMethod(CallbackMethodEnum.POST)
            .tag("tag")
            .activeMembers(new ArrayList<>(Arrays.asList(new ConferenceMember())));

    /**
     * Model tests for Conference
     */
    @Test
    public void testConference() {
        assertThat(model, instanceOf(Conference.class));
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        assertThat(model.getId(), instanceOf(String.class));
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        assertThat(model.getName(), instanceOf(String.class));
    }

    /**
     * Test the property 'createdTime'
     */
    @Test
    public void createdTimeTest() {
        assertThat(model.getCreatedTime(), instanceOf(OffsetDateTime.class));
    }

    /**
     * Test the property 'completedTime'
     */
    @Test
    public void completedTimeTest() {
        assertThat(model.getCompletedTime(), instanceOf(OffsetDateTime.class));
    }

    /**
     * Test the property 'conferenceEventUrl'
     */
    @Test
    public void conferenceEventUrlTest() {
        assertThat(model.getConferenceEventUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'conferenceEventMethod'
     */
    @Test
    public void conferenceEventMethodTest() {
        assertThat(model.getConferenceEventMethod(), instanceOf(CallbackMethodEnum.class));
    }

    /**
     * Test the property 'tag'
     */
    @Test
    public void tagTest() {
        assertThat(model.getTag(), instanceOf(String.class));
    }

    /**
     * Test the property 'activeMembers'
     */
    @Test
    public void activeMembersTest() {
        assertThat(model.getActiveMembers(), instanceOf(ArrayList.class));
    }

}
