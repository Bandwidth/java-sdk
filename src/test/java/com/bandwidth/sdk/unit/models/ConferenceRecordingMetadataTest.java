/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bandwidth.sdk.unit.models;

import org.junit.jupiter.api.Test;

import java.net.URI;
import java.time.OffsetDateTime;
import com.bandwidth.sdk.model.ConferenceRecordingMetadata;
import com.bandwidth.sdk.model.FileFormatEnum;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;

/**
 * Model tests for ConferenceRecordingMetadata
 */
public class ConferenceRecordingMetadataTest {
    private final ConferenceRecordingMetadata model = new ConferenceRecordingMetadata()
            .accountId("accountId")
            .conferenceId("conferenceId")
            .name("name")
            .recordingId("recordingId")
            .duration("duration")
            .channels(0)
            .startTime(OffsetDateTime.now())
            .endTime(OffsetDateTime.now())
            .fileFormat(FileFormatEnum.WAV)
            .status("status")
            .mediaUrl(URI.create("http://example.com"))
            .recordingName("recordingName");

    /**
     * Model tests for ConferenceRecordingMetadata
     */
    @Test
    public void testConferenceRecordingMetadata() {
        assertThat(model, instanceOf(ConferenceRecordingMetadata.class));
    }

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
        assertThat(model.getAccountId(), instanceOf(String.class));
    }

    /**
     * Test the property 'conferenceId'
     */
    @Test
    public void conferenceIdTest() {
        assertThat(model.getConferenceId(), instanceOf(String.class));
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        assertThat(model.getName(), instanceOf(String.class));
    }

    /**
     * Test the property 'recordingId'
     */
    @Test
    public void recordingIdTest() {
        assertThat(model.getRecordingId(), instanceOf(String.class));
    }

    /**
     * Test the property 'duration'
     */
    @Test
    public void durationTest() {
        assertThat(model.getDuration(), instanceOf(String.class));
    }

    /**
     * Test the property 'channels'
     */
    @Test
    public void channelsTest() {
        assertThat(model.getChannels(), instanceOf(Integer.class));
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    public void startTimeTest() {
        assertThat(model.getStartTime(), instanceOf(OffsetDateTime.class));
    }

    /**
     * Test the property 'endTime'
     */
    @Test
    public void endTimeTest() {
        assertThat(model.getEndTime(), instanceOf(OffsetDateTime.class));
    }

    /**
     * Test the property 'fileFormat'
     */
    @Test
    public void fileFormatTest() {
        assertThat(model.getFileFormat(), instanceOf(FileFormatEnum.class));
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        assertThat(model.getStatus(), instanceOf(String.class));
    }

    /**
     * Test the property 'mediaUrl'
     */
    @Test
    public void mediaUrlTest() {
        assertThat(model.getMediaUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'recordingName'
     */
    @Test
    public void recordingNameTest() {
        assertThat(model.getRecordingName(), instanceOf(String.class));
    }

}
