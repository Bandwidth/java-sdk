/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bandwidth.sdk.unit.models;

import org.junit.jupiter.api.Test;

import java.net.URI;
import com.bandwidth.sdk.model.MachineDetectionConfiguration;
import com.bandwidth.sdk.model.CallbackMethodEnum;
import com.bandwidth.sdk.model.MachineDetectionModeEnum;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;

/**
 * Model tests for MachineDetectionConfiguration
 */
public class MachineDetectionConfigurationTest {
    private final MachineDetectionConfiguration model = new MachineDetectionConfiguration()
            .mode(MachineDetectionModeEnum.ASYNC)
            .detectionTimeout(10.0)
            .silenceTimeout(10.0)
            .speechThreshold(10.0)
            .speechEndThreshold(10.0)
            .machineSpeechEndThreshold(10.0)
            .delayResult(true)
            .callbackUrl(URI.create("https://example.com"))
            .callbackMethod(CallbackMethodEnum.GET)
            .username("username")
            .password("password")
            .fallbackUrl(URI.create("https://example.com"))
            .fallbackMethod(CallbackMethodEnum.GET)
            .fallbackUsername("fallbackUsername")
            .fallbackPassword("fallbackPassword");

    /**
     * Model tests for MachineDetectionConfiguration
     */
    @Test
    public void testMachineDetectionConfiguration() {
        assertThat(model, instanceOf(MachineDetectionConfiguration.class));
    }

    /**
     * Test the property 'mode'
     */
    @Test
    public void modeTest() {
        assertThat(model.getMode(), instanceOf(MachineDetectionModeEnum.class));
    }

    /**
     * Test the property 'detectionTimeout'
     */
    @Test
    public void detectionTimeoutTest() {
        assertThat(model.getDetectionTimeout(), instanceOf(Double.class));
    }

    /**
     * Test the property 'silenceTimeout'
     */
    @Test
    public void silenceTimeoutTest() {
        assertThat(model.getSilenceTimeout(), instanceOf(Double.class));
    }

    /**
     * Test the property 'speechThreshold'
     */
    @Test
    public void speechThresholdTest() {
        assertThat(model.getSpeechThreshold(), instanceOf(Double.class));
    }

    /**
     * Test the property 'speechEndThreshold'
     */
    @Test
    public void speechEndThresholdTest() {
        assertThat(model.getSpeechEndThreshold(), instanceOf(Double.class));
    }

    /**
     * Test the property 'machineSpeechEndThreshold'
     */
    @Test
    public void machineSpeechEndThresholdTest() {
        assertThat(model.getMachineSpeechEndThreshold(), instanceOf(Double.class));
    }

    /**
     * Test the property 'delayResult'
     */
    @Test
    public void delayResultTest() {
        assertThat(model.getDelayResult(), instanceOf(Boolean.class));
    }

    /**
     * Test the property 'callbackUrl'
     */
    @Test
    public void callbackUrlTest() {
        assertThat(model.getCallbackUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'callbackMethod'
     */
    @Test
    public void callbackMethodTest() {
        assertThat(model.getCallbackMethod(), instanceOf(CallbackMethodEnum.class));
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        assertThat(model.getUsername(), instanceOf(String.class));
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        assertThat(model.getPassword(), instanceOf(String.class));
    }

    /**
     * Test the property 'fallbackUrl'
     */
    @Test
    public void fallbackUrlTest() {
        assertThat(model.getFallbackUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'fallbackMethod'
     */
    @Test
    public void fallbackMethodTest() {
        assertThat(model.getFallbackMethod(), instanceOf(CallbackMethodEnum.class));
    }

    /**
     * Test the property 'fallbackUsername'
     */
    @Test
    public void fallbackUsernameTest() {
        assertThat(model.getFallbackUsername(), instanceOf(String.class));
    }

    /**
     * Test the property 'fallbackPassword'
     */
    @Test
    public void fallbackPasswordTest() {
        assertThat(model.getFallbackPassword(), instanceOf(String.class));
    }

}
