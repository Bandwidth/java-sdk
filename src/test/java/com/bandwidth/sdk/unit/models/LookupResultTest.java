/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bandwidth.sdk.unit.models;

import org.junit.jupiter.api.Test;

import com.bandwidth.sdk.model.LookupResult;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;

/**
 * Model tests for LookupResult
 */
public class LookupResultTest {
    private final LookupResult model = new LookupResult()
            .responseCode(200)
            .message("message")
            .e164Format("e164Format")
            .formatted("formatted")
            .country("country")
            .lineType("lineType")
            .lineProvider("lineProvider")
            .mobileCountryCode("mobileCountryCode")
            .mobileNetworkCode("mobileNetworkCode");

    /**
     * Model tests for LookupResult
     */
    @Test
    public void testLookupResult() {
        assertThat(model, instanceOf(LookupResult.class));
    }

    /**
     * Test the property 'responseCode'
     */
    @Test
    public void responseCodeTest() {
        assertThat(model.getResponseCode(), instanceOf(Integer.class));
    }

    /**
     * Test the property 'message'
     */
    @Test
    public void messageTest() {
        assertThat(model.getMessage(), instanceOf(String.class));
    }

    /**
     * Test the property 'e164Format'
     */
    @Test
    public void e164FormatTest() {
        assertThat(model.getE164Format(), instanceOf(String.class));
    }

    /**
     * Test the property 'formatted'
     */
    @Test
    public void formattedTest() {
        assertThat(model.getFormatted(), instanceOf(String.class));
    }

    /**
     * Test the property 'country'
     */
    @Test
    public void countryTest() {
        assertThat(model.getCountry(), instanceOf(String.class));
    }

    /**
     * Test the property 'lineType'
     */
    @Test
    public void lineTypeTest() {
        assertThat(model.getLineType(), instanceOf(String.class));
    }

    /**
     * Test the property 'lineProvider'
     */
    @Test
    public void lineProviderTest() {
        assertThat(model.getLineProvider(), instanceOf(String.class));
    }

    /**
     * Test the property 'mobileCountryCode'
     */
    @Test
    public void mobileCountryCodeTest() {
        assertThat(model.getMobileCountryCode(), instanceOf(String.class));
    }

    /**
     * Test the property 'mobileNetworkCode'
     */
    @Test
    public void mobileNetworkCodeTest() {
        assertThat(model.getMobileNetworkCode(), instanceOf(String.class));
    }

}
