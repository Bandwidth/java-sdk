/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bandwidth.sdk.unit.models;

import org.junit.jupiter.api.Test;

import java.time.OffsetDateTime;
import com.bandwidth.sdk.model.ConferenceMemberJoinCallback;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;

/**
 * Model tests for ConferenceMemberJoinCallback
 */
public class ConferenceMemberJoinCallbackTest {
    private final ConferenceMemberJoinCallback model = new ConferenceMemberJoinCallback()
            .eventType("conferenceMemberJoin")
            .eventTime(OffsetDateTime.now())
            .conferenceId("conferenceId")
            .name("name")
            .from("from")
            .to("to")
            .callId("callId")
            .tag("tag");

    /**
     * Model tests for ConferenceMemberJoinCallback
     */
    @Test
    public void testConferenceMemberJoinCallback() {
        assertThat(model, instanceOf(ConferenceMemberJoinCallback.class));
    }

    /**
     * Test the property 'eventType'
     */
    @Test
    public void eventTypeTest() {
        assertThat(model.getEventType(), instanceOf(String.class));
    }

    /**
     * Test the property 'eventTime'
     */
    @Test
    public void eventTimeTest() {
        assertThat(model.getEventTime(), instanceOf(OffsetDateTime.class));
    }

    /**
     * Test the property 'conferenceId'
     */
    @Test
    public void conferenceIdTest() {
        assertThat(model.getConferenceId(), instanceOf(String.class));
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        assertThat(model.getName(), instanceOf(String.class));
    }

    /**
     * Test the property 'from'
     */
    @Test
    public void fromTest() {
        assertThat(model.getFrom(), instanceOf(String.class));
    }

    /**
     * Test the property 'to'
     */
    @Test
    public void toTest() {
        assertThat(model.getTo(), instanceOf(String.class));
    }

    /**
     * Test the property 'callId'
     */
    @Test
    public void callIdTest() {
        assertThat(model.getCallId(), instanceOf(String.class));
    }

    /**
     * Test the property 'tag'
     */
    @Test
    public void tagTest() {
        assertThat(model.getTag(), instanceOf(String.class));
    }

}
