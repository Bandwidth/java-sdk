/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bandwidth.sdk.unit.models;

import org.junit.jupiter.api.Test;

import java.net.URI;
import java.time.OffsetDateTime;
import com.bandwidth.sdk.model.CreateCallResponse;
import com.bandwidth.sdk.model.CallbackMethodEnum;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;

/**
 * Model tests for CreateCallResponse
 */
public class CreateCallResponseTest {
    private final CreateCallResponse model = new CreateCallResponse()
            .applicationId("applicationId")
            .accountId("accountId")
            .callId("callId")
            .to("to")
            .from("from")
            .enqueuedTime(OffsetDateTime.now())
            .callUrl(URI.create("http://example.com"))
            .callTimeout(30.0)
            .callbackTimeout(30.0)
            .tag("tag")
            .answerMethod(CallbackMethodEnum.POST)
            .answerUrl(URI.create("http://example.com"))
            .answerFallbackMethod(CallbackMethodEnum.POST)
            .answerFallbackUrl(URI.create("http://example.com"))
            .disconnectMethod(CallbackMethodEnum.POST)
            .disconnectUrl(URI.create("http://example.com"))
            .username("username")
            .password("password")
            .fallbackUsername("fallbackUsername")
            .fallbackPassword("fallbackPassword")
            .priority(1);

    /**
     * Model tests for CreateCallResponse
     */
    @Test
    public void testCreateCallResponse() {
        assertThat(model, instanceOf(CreateCallResponse.class));
    }

    /**
     * Test the property 'applicationId'
     */
    @Test
    public void applicationIdTest() {
        assertThat(model.getApplicationId(), instanceOf(String.class));
    }

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
        assertThat(model.getAccountId(), instanceOf(String.class));
    }

    /**
     * Test the property 'callId'
     */
    @Test
    public void callIdTest() {
        assertThat(model.getCallId(), instanceOf(String.class));
    }

    /**
     * Test the property 'to'
     */
    @Test
    public void toTest() {
        assertThat(model.getTo(), instanceOf(String.class));
    }

    /**
     * Test the property 'from'
     */
    @Test
    public void fromTest() {
        assertThat(model.getFrom(), instanceOf(String.class));
    }

    /**
     * Test the property 'enqueuedTime'
     */
    @Test
    public void enqueuedTimeTest() {
        assertThat(model.getEnqueuedTime(), instanceOf(OffsetDateTime.class));
    }

    /**
     * Test the property 'callUrl'
     */
    @Test
    public void callUrlTest() {
        assertThat(model.getCallUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'callTimeout'
     */
    @Test
    public void callTimeoutTest() {
        assertThat(model.getCallTimeout(), instanceOf(Double.class));
    }

    /**
     * Test the property 'callbackTimeout'
     */
    @Test
    public void callbackTimeoutTest() {
        assertThat(model.getCallbackTimeout(), instanceOf(Double.class));
    }

    /**
     * Test the property 'tag'
     */
    @Test
    public void tagTest() {
        assertThat(model.getTag(), instanceOf(String.class));
    }

    /**
     * Test the property 'answerMethod'
     */
    @Test
    public void answerMethodTest() {
        assertThat(model.getAnswerMethod(), instanceOf(CallbackMethodEnum.class));
    }

    /**
     * Test the property 'answerUrl'
     */
    @Test
    public void answerUrlTest() {
        assertThat(model.getAnswerUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'answerFallbackMethod'
     */
    @Test
    public void answerFallbackMethodTest() {
        assertThat(model.getAnswerFallbackMethod(), instanceOf(CallbackMethodEnum.class));
    }

    /**
     * Test the property 'answerFallbackUrl'
     */
    @Test
    public void answerFallbackUrlTest() {
        assertThat(model.getAnswerFallbackUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'disconnectMethod'
     */
    @Test
    public void disconnectMethodTest() {
        assertThat(model.getDisconnectMethod(), instanceOf(CallbackMethodEnum.class));
    }

    /**
     * Test the property 'disconnectUrl'
     */
    @Test
    public void disconnectUrlTest() {
        assertThat(model.getDisconnectUrl(), instanceOf(URI.class));
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        assertThat(model.getUsername(), instanceOf(String.class));
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        assertThat(model.getPassword(), instanceOf(String.class));
    }

    /**
     * Test the property 'fallbackUsername'
     */
    @Test
    public void fallbackUsernameTest() {
        assertThat(model.getFallbackUsername(), instanceOf(String.class));
    }

    /**
     * Test the property 'fallbackPassword'
     */
    @Test
    public void fallbackPasswordTest() {
        assertThat(model.getFallbackPassword(), instanceOf(String.class));
    }

    /**
     * Test the property 'priority'
     */
    @Test
    public void priorityTest() {
        assertThat(model.getPriority(), instanceOf(Integer.class));
    }

}
