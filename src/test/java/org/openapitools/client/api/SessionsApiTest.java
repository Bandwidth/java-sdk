/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ForbiddenRequest;
import org.openapitools.client.model.Participant;
import org.openapitools.client.model.RequestError;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.Subscriptions;
import org.openapitools.client.model.UnauthorizedRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionsApi
 */
@Disabled
public class SessionsApiTest {

    private final SessionsApi api = new SessionsApi();

    /**
     * Add Participant to Session
     *
     * Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addParticipantToSessionTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        String participantId = null;
        Subscriptions subscriptions = null;
        api.addParticipantToSession(accountId, sessionId, participantId, subscriptions);
        // TODO: test validations
    }

    /**
     * Create Session
     *
     * Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        String accountId = null;
        Session session = null;
        Session response = api.createSession(accountId, session);
        // TODO: test validations
    }

    /**
     * Delete Session
     *
     * Delete session by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSessionTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        api.deleteSession(accountId, sessionId);
        // TODO: test validations
    }

    /**
     * Get Participant Subscriptions
     *
     * Get a participant&#39;s subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipantSubscriptionsTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        String participantId = null;
        Subscriptions response = api.getParticipantSubscriptions(accountId, sessionId, participantId);
        // TODO: test validations
    }

    /**
     * Get Session
     *
     * Get session by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        Session response = api.getSession(accountId, sessionId);
        // TODO: test validations
    }

    /**
     * List Participants in Session
     *
     * List participants in a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionParticipantsTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        List<Participant> response = api.listSessionParticipants(accountId, sessionId);
        // TODO: test validations
    }

    /**
     * Remove Participant from Session
     *
     * Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeParticipantFromSessionTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        String participantId = null;
        api.removeParticipantFromSession(accountId, sessionId, participantId);
        // TODO: test validations
    }

    /**
     * Update Participant Subscriptions
     *
     * Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipantSubscriptionsTest() throws ApiException {
        String accountId = null;
        String sessionId = null;
        String participantId = null;
        Subscriptions subscriptions = null;
        api.updateParticipantSubscriptions(accountId, sessionId, participantId, subscriptions);
        // TODO: test validations
    }

}
