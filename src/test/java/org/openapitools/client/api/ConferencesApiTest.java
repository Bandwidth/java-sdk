/*
 * Bandwidth
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Conference;
import org.openapitools.client.model.ConferenceMember;
import org.openapitools.client.model.ConferenceRecordingMetadata;
import java.io.File;
import org.openapitools.client.model.UpdateConference;
import org.openapitools.client.model.UpdateConferenceMember;
import org.openapitools.client.model.VoiceApiError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConferencesApi
 */
@Disabled
public class ConferencesApiTest {

    private final ConferencesApi api = new ConferencesApi();

    /**
     * Download Conference Recording
     *
     * Downloads the specified recording file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadConferenceRecordingTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        String recordingId = null;
        File response = api.downloadConferenceRecording(accountId, conferenceId, recordingId);
        // TODO: test validations
    }

    /**
     * Get Conference Information
     *
     * Returns information about the specified conference.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConferenceTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        Conference response = api.getConference(accountId, conferenceId);
        // TODO: test validations
    }

    /**
     * Get Conference Member
     *
     * Returns information about the specified conference member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConferenceMemberTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        String memberId = null;
        ConferenceMember response = api.getConferenceMember(accountId, conferenceId, memberId);
        // TODO: test validations
    }

    /**
     * Get Conference Recording Information
     *
     * Returns metadata for the specified recording.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConferenceRecordingTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        String recordingId = null;
        ConferenceRecordingMetadata response = api.getConferenceRecording(accountId, conferenceId, recordingId);
        // TODO: test validations
    }

    /**
     * Get Conference Recordings
     *
     * Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConferenceRecordingsTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        List<ConferenceRecordingMetadata> response = api.listConferenceRecordings(accountId, conferenceId);
        // TODO: test validations
    }

    /**
     * Get Conferences
     *
     * Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConferencesTest() throws ApiException {
        String accountId = null;
        String name = null;
        String minCreatedTime = null;
        String maxCreatedTime = null;
        Integer pageSize = null;
        String pageToken = null;
        List<Conference> response = api.listConferences(accountId, name, minCreatedTime, maxCreatedTime, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update Conference
     *
     * Update the conference state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConferenceTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        UpdateConference updateConference = null;
        api.updateConference(accountId, conferenceId, updateConference);
        // TODO: test validations
    }

    /**
     * Update Conference BXML
     *
     * Update the conference BXML document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConferenceBxmlTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        String body = null;
        api.updateConferenceBxml(accountId, conferenceId, body);
        // TODO: test validations
    }

    /**
     * Update Conference Member
     *
     * Updates settings for a particular conference member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConferenceMemberTest() throws ApiException {
        String accountId = null;
        String conferenceId = null;
        String memberId = null;
        UpdateConferenceMember updateConferenceMember = null;
        api.updateConferenceMember(accountId, conferenceId, memberId, updateConferenceMember);
        // TODO: test validations
    }

}
